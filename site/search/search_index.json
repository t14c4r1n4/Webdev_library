{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"____ ____ _ / __ \\___ _____ / __ )___ ____ _(_)___ ____ / / / / _ \\/ ___/ / __ / _ \\/ __ `/ / __ \\/ __ \\ / /_/ / __/ / / /_/ / __/ /_/ / / / / / / / / /_____/\\___/_/ /_____/\\___/\\__, /_/_/ /_/_/ /_/ /____/ __ _ ______ ____ ___ / /_ ______ ______ _____ | | / / __ \\/ __ \\ / _ \\/ __/ | /| / / __ `/ ___/ | |/ / /_/ / / / / / __/ /_ | |/ |/ / /_/ (__ ) |___/\\____/_/ /_/ \\___/\\__/ |__/|__/\\__,_/____/ ___ ____ _ _ / _ \\_ __ ___ | __ \\ __ _ _ __| |_(_) __ _ ___ _ __ ___ / /_\\/ '__/ _ \\| |/ // _` | '__| __| |/ _` |/ _ \\ '_ ` _ \\ / /_\\\\| | | (_) | |\\ \\ (_| | | | |_| | (_| | __/ | | | | | \\____/|_| \\___/|_||_/\\__,_|_| \\__|_|\\__, |\\___|_| |_| |_| |___/","title":"Home"},{"location":"database/allgemein/","text":"Relationales Datenbanksystem (RDBS) die Operatoren sind Bestandteil der relationalen Algebra das konzeptuelle Modell ist das sog. ERM (Entity Relationship Model) das physische Modell ist tabellenbasiert RDBS erf\u00fcllen die ACID-Eigenschaften Atomarit\u00e4t (A) Ausf\u00fchrung aller oder keiner Transaktionen einer DB DB dokumentieren alle Transaktionen in einem Log Konsistenz (C) die Daten sind korrekt und aktuell (Datenintegrit\u00e4t) Isolation (I) Transaktionen m\u00fcssen abgeschlossen sein Dauerhaftigkeit (D) erfolgreiche \u00c4nderungen der Daten in der DB werden dauerhaft gespeichert F\u00fcr die Realisierung eines RDBS werden Konzepte und Methoden aus folgenden Bereichen verwendet: - Datenbankdesign - Datenmodellierung Datenbankdesign Die drei Phasen: - konzeptionelles Datenbankdesign - logisches Datenbankdesign - physisches Datenbankdesign Konzeptionelles Datenbankdesign das Schema dient als Grundlage f\u00fcr die Erstellung einer DB der Fokus liegt auf dem Schema es beinhaltet keine Daten Verwendung des ERM (f\u00e4llt in den Bereich der Datenmodellierung) Datenmodellierung Grundbegriffe Entit\u00e4t / Tabellenname repr\u00e4sentiert ein Objekt, welches Elemente mit gleichen Attributen beinhaltet Relation / Tabelle repr\u00e4sentiert die Entit\u00e4t, deren Attribute und Tupel Tupel / Datensatz repr\u00e4sentiert einen einzelnen Datensatz einer Tabelle Attribut repr\u00e4sentiert die Spalten eines Tupels, steht im Kontext zu der Entit\u00e4t Index repr\u00e4sentiert den Prim\u00e4rindex (=> Prim\u00e4rschl\u00fcssel)/ repr\u00e4sentiert den Sekund\u00e4rindex Beziehungen Kardinalit\u00e4t bei Beziehungen definiert, wie viele Entit\u00e4ten A mit wie vielen Entit\u00e4ten B in Relation stehen 1:1 Beziehung Eine Entit\u00e4t A ist einer Entit\u00e4t B zugeordnet 1:N Beziehung Eine Entit\u00e4t A ist n-vielen Entit\u00e4ten B zugeordnet N:M Beziehung N-viele Entit\u00e4ten A sind m-vielen Entit\u00e4ten B zugeordnet Entity Relationship Model (ERM) Chen Notation beinhaltet die Relation zwischen Entit\u00e4ten, Attributen inkl. der Kardinalit\u00e4t Entit\u00e4t Attribut Relation Kardinalit\u00e4t Logisches Datenbankdesign Umwandlung ERM in Relationsmodell - Bildung von Tabellen und Attributen - Ber\u00fccksichtigung der Kardinalit\u00e4ten in Form von Prim\u00e4r- und Fremdschl\u00fcsseln Datenmodellierung beinhaltet: Prim\u00e4rschl\u00fcssel eindeutig und kommen in Tabelle nur einmal vor stellen Prim\u00e4rindex dar Fremdschl\u00fcssel mehrere Fremdschl\u00fcssel in Tabelle m\u00f6glich, abh\u00e4ngig von Relation zu anderen Entit\u00e4ten Prim\u00e4rschl\u00fcssel k\u00f6nnen in anderen Tabellen als Fremdschl\u00fcssel notiert werden Physisches Datenbankdesign Umwandlung Relationsmodell in RDMS - Ber\u00fccksichtigung von Datentypen f\u00fcr die Attribute - Realisierung unter Verwendung von SQL Datentypen Datentyp Beschreibung Speicherplatz INT Ganzzahlen 4 Bytes FLOAT Flie\u00dfkommazahlen 4 Bytes DOUBLE Flie\u00dfkommazahlen mit einem gr\u00f6\u00dferen Wertebereich 8 Bytes DATE Datumswerte YYYY-MM-DD 3 Bytes DATETIME Datumswerte YYYY-MM-DD hh:mm:ss 8 Bytes VARCHAR Zeichenkette variabler L\u00e4nge L + 1 Bytes","title":"Relationales Datenbanksystem (RDBS)"},{"location":"database/allgemein/#relationales-datenbanksystem-rdbs","text":"die Operatoren sind Bestandteil der relationalen Algebra das konzeptuelle Modell ist das sog. ERM (Entity Relationship Model) das physische Modell ist tabellenbasiert RDBS erf\u00fcllen die ACID-Eigenschaften","title":"Relationales Datenbanksystem (RDBS)"},{"location":"database/allgemein/#atomaritat-a","text":"Ausf\u00fchrung aller oder keiner Transaktionen einer DB DB dokumentieren alle Transaktionen in einem Log","title":"Atomarit\u00e4t (A)"},{"location":"database/allgemein/#konsistenz-c","text":"die Daten sind korrekt und aktuell (Datenintegrit\u00e4t)","title":"Konsistenz (C)"},{"location":"database/allgemein/#isolation-i","text":"Transaktionen m\u00fcssen abgeschlossen sein","title":"Isolation (I)"},{"location":"database/allgemein/#dauerhaftigkeit-d","text":"erfolgreiche \u00c4nderungen der Daten in der DB werden dauerhaft gespeichert F\u00fcr die Realisierung eines RDBS werden Konzepte und Methoden aus folgenden Bereichen verwendet: - Datenbankdesign - Datenmodellierung","title":"Dauerhaftigkeit (D)"},{"location":"database/allgemein/#datenbankdesign","text":"Die drei Phasen: - konzeptionelles Datenbankdesign - logisches Datenbankdesign - physisches Datenbankdesign","title":"Datenbankdesign"},{"location":"database/allgemein/#konzeptionelles-datenbankdesign","text":"das Schema dient als Grundlage f\u00fcr die Erstellung einer DB der Fokus liegt auf dem Schema es beinhaltet keine Daten Verwendung des ERM (f\u00e4llt in den Bereich der Datenmodellierung)","title":"Konzeptionelles Datenbankdesign"},{"location":"database/allgemein/#datenmodellierung","text":"","title":"Datenmodellierung"},{"location":"database/allgemein/#grundbegriffe","text":"Entit\u00e4t / Tabellenname repr\u00e4sentiert ein Objekt, welches Elemente mit gleichen Attributen beinhaltet Relation / Tabelle repr\u00e4sentiert die Entit\u00e4t, deren Attribute und Tupel Tupel / Datensatz repr\u00e4sentiert einen einzelnen Datensatz einer Tabelle Attribut repr\u00e4sentiert die Spalten eines Tupels, steht im Kontext zu der Entit\u00e4t Index repr\u00e4sentiert den Prim\u00e4rindex (=> Prim\u00e4rschl\u00fcssel)/ repr\u00e4sentiert den Sekund\u00e4rindex","title":"Grundbegriffe"},{"location":"database/allgemein/#beziehungen","text":"Kardinalit\u00e4t bei Beziehungen definiert, wie viele Entit\u00e4ten A mit wie vielen Entit\u00e4ten B in Relation stehen 1:1 Beziehung Eine Entit\u00e4t A ist einer Entit\u00e4t B zugeordnet 1:N Beziehung Eine Entit\u00e4t A ist n-vielen Entit\u00e4ten B zugeordnet N:M Beziehung N-viele Entit\u00e4ten A sind m-vielen Entit\u00e4ten B zugeordnet","title":"Beziehungen"},{"location":"database/allgemein/#entity-relationship-model-erm","text":"Chen Notation beinhaltet die Relation zwischen Entit\u00e4ten, Attributen inkl. der Kardinalit\u00e4t Entit\u00e4t Attribut Relation Kardinalit\u00e4t","title":"Entity Relationship Model (ERM)"},{"location":"database/allgemein/#logisches-datenbankdesign","text":"Umwandlung ERM in Relationsmodell - Bildung von Tabellen und Attributen - Ber\u00fccksichtigung der Kardinalit\u00e4ten in Form von Prim\u00e4r- und Fremdschl\u00fcsseln","title":"Logisches Datenbankdesign"},{"location":"database/allgemein/#datenmodellierung_1","text":"beinhaltet:","title":"Datenmodellierung"},{"location":"database/allgemein/#primarschlussel","text":"eindeutig und kommen in Tabelle nur einmal vor stellen Prim\u00e4rindex dar","title":"Prim\u00e4rschl\u00fcssel"},{"location":"database/allgemein/#fremdschlussel","text":"mehrere Fremdschl\u00fcssel in Tabelle m\u00f6glich, abh\u00e4ngig von Relation zu anderen Entit\u00e4ten Prim\u00e4rschl\u00fcssel k\u00f6nnen in anderen Tabellen als Fremdschl\u00fcssel notiert werden","title":"Fremdschl\u00fcssel"},{"location":"database/allgemein/#physisches-datenbankdesign","text":"Umwandlung Relationsmodell in RDMS - Ber\u00fccksichtigung von Datentypen f\u00fcr die Attribute - Realisierung unter Verwendung von SQL","title":"Physisches Datenbankdesign"},{"location":"database/allgemein/#datentypen","text":"Datentyp Beschreibung Speicherplatz INT Ganzzahlen 4 Bytes FLOAT Flie\u00dfkommazahlen 4 Bytes DOUBLE Flie\u00dfkommazahlen mit einem gr\u00f6\u00dferen Wertebereich 8 Bytes DATE Datumswerte YYYY-MM-DD 3 Bytes DATETIME Datumswerte YYYY-MM-DD hh:mm:ss 8 Bytes VARCHAR Zeichenkette variabler L\u00e4nge L + 1 Bytes","title":"Datentypen"},{"location":"database/befehle/","text":"SQL-Befehle PRIMARY KEY Prim\u00e4rschl\u00fcssel FOREIGN KEY Fremdschl\u00fcssel AUTO_INCREMENT automatisches Hochz\u00e4hlen um 1 UNIQUE einzigartig NOT NULL nicht leer SQL-Statement Syntax Beschreibung CREATE CREATE TABLE Tabellenname ( Attributsname Datentyp Metadaten, Attributsname Datentyp Metadaten,); erzeugt Tabelle ALTER ADD ALTER TABLE Tabellenname ADD NeuesAttribut Datentyp Metadaten; \u00e4ndert Tabellen und f\u00fcgt neue Attribute hinzu ALTER MODIFY ALTER TABLE Tabellenname MODIFY NeuesAttribut Datentyp Metadaten; ALTER CHANGE ALTER TABLE Tabellenname CHANGE AlterName NeuerName Datentyp Metadaten; ver\u00e4ndert Namen von Attributen ALTER DROP ALTER TABLE Tabellenname DROP Attribut; ver\u00e4ndert Tabellen und l\u00f6scht Attribute DROP DROP TABLE Tabelle; l\u00f6scht komplette Tabelle SELECT SELECT Attribut FROM TABELLE SELECT * FROM TABELLE; selektiert Datens\u00e4tze * beinhaltet alle Datens\u00e4tze einer Tabelle WHERE SELECT * FROM Tabelle WHERE Attribut Operator Wert; spezifiziert zu selektierende Datens\u00e4tze UPDATE UPDATE Tabelle SET Attribut = Wert, Attribut = Wert; ver\u00e4ndert Datens\u00e4tze Ohne WHERE werden alle Attribute in allen Tupeln der Tabelle aktualisiert. INSERT INSERT INTO Tabelle (Attribut1, Attribut2,\u2026), VALUES (Wert1, Wert2, \u2026), (Wert1,Wert2,\u2026); f\u00fcgt Datens\u00e4tze in einer Tabelle ein DELETE DELETE FROM table WHERE id = wert; l\u00f6scht eine Zeile DELETE FROM table WHERE id IN (wert1, wert2, wert3); l\u00f6scht mehrere Zeilen SUBSELECT SELECT * FROM table WHERE wert = ( SELECT wert2 FROM table2 WHERE id = id ); verschachteltes SELECT kann nur einzelnen Wert ermitteln","title":"Befehle"},{"location":"database/befehle/#sql-befehle","text":"PRIMARY KEY Prim\u00e4rschl\u00fcssel FOREIGN KEY Fremdschl\u00fcssel AUTO_INCREMENT automatisches Hochz\u00e4hlen um 1 UNIQUE einzigartig NOT NULL nicht leer SQL-Statement Syntax Beschreibung CREATE CREATE TABLE Tabellenname ( Attributsname Datentyp Metadaten, Attributsname Datentyp Metadaten,); erzeugt Tabelle ALTER ADD ALTER TABLE Tabellenname ADD NeuesAttribut Datentyp Metadaten; \u00e4ndert Tabellen und f\u00fcgt neue Attribute hinzu ALTER MODIFY ALTER TABLE Tabellenname MODIFY NeuesAttribut Datentyp Metadaten; ALTER CHANGE ALTER TABLE Tabellenname CHANGE AlterName NeuerName Datentyp Metadaten; ver\u00e4ndert Namen von Attributen ALTER DROP ALTER TABLE Tabellenname DROP Attribut; ver\u00e4ndert Tabellen und l\u00f6scht Attribute DROP DROP TABLE Tabelle; l\u00f6scht komplette Tabelle SELECT SELECT Attribut FROM TABELLE SELECT * FROM TABELLE; selektiert Datens\u00e4tze * beinhaltet alle Datens\u00e4tze einer Tabelle WHERE SELECT * FROM Tabelle WHERE Attribut Operator Wert; spezifiziert zu selektierende Datens\u00e4tze UPDATE UPDATE Tabelle SET Attribut = Wert, Attribut = Wert; ver\u00e4ndert Datens\u00e4tze Ohne WHERE werden alle Attribute in allen Tupeln der Tabelle aktualisiert. INSERT INSERT INTO Tabelle (Attribut1, Attribut2,\u2026), VALUES (Wert1, Wert2, \u2026), (Wert1,Wert2,\u2026); f\u00fcgt Datens\u00e4tze in einer Tabelle ein DELETE DELETE FROM table WHERE id = wert; l\u00f6scht eine Zeile DELETE FROM table WHERE id IN (wert1, wert2, wert3); l\u00f6scht mehrere Zeilen SUBSELECT SELECT * FROM table WHERE wert = ( SELECT wert2 FROM table2 WHERE id = id ); verschachteltes SELECT kann nur einzelnen Wert ermitteln","title":"SQL-Befehle"},{"location":"database/joins/","text":"JOINS erm\u00f6glicht die Verkn\u00fcpfung von zwei Tabellen Tabellen werden mit K\u00fcrzeln notiert Syntax: SELECT * FROM <tabelle> <K\u00fcrzel> INNER JOIN vereint alle Werte, die in beiden Tabellen vorhanden sind Syntax: SELECT <attribut> FROM <tabelle1> INNER JOIN <tabelle2> ON <wert1> = <wert2> LEFT / RIGHT JOIN verkn\u00fcpft alle Datens\u00e4tze auf der jeweiligen Seite mit den passenden Datens\u00e4tzen Datens\u00e4tze die nicht verkn\u00fcpft werden k\u00f6nnen, werden als NULL aufgef\u00fcllt Syntax: SELECT * FROM <tabelle1> LEFT JOIN <tabelle2> ON <attribut1> = <attribut2>","title":"JOINS"},{"location":"database/joins/#joins","text":"erm\u00f6glicht die Verkn\u00fcpfung von zwei Tabellen Tabellen werden mit K\u00fcrzeln notiert Syntax: SELECT * FROM <tabelle> <K\u00fcrzel>","title":"JOINS"},{"location":"database/joins/#inner-join","text":"vereint alle Werte, die in beiden Tabellen vorhanden sind Syntax: SELECT <attribut> FROM <tabelle1> INNER JOIN <tabelle2> ON <wert1> = <wert2>","title":"INNER JOIN"},{"location":"database/joins/#left-right-join","text":"verkn\u00fcpft alle Datens\u00e4tze auf der jeweiligen Seite mit den passenden Datens\u00e4tzen Datens\u00e4tze die nicht verkn\u00fcpft werden k\u00f6nnen, werden als NULL aufgef\u00fcllt Syntax: SELECT * FROM <tabelle1> LEFT JOIN <tabelle2> ON <attribut1> = <attribut2>","title":"LEFT / RIGHT JOIN"},{"location":"database/operatoren/","text":"Operatoren Arithmetische Operatoren k\u00f6nnen mit SELECT verwendet werden Beispiel: SELECT <attribut> + <wert>(<attribut>) FROM <tabelle>; Vergleichsoperatoren Zeichenoperatoren Schl\u00fcsselwort LIKE wird f\u00fcr den Vergleich von Zeichenketten verwendet Beispiel: %<muster>% SELECT * FROM <tabelle> WHERE <attribut> LIKE \u2018%<muster>%\u2018; Logische Operatoren AND OR NOT Mengenoperatoren","title":"Operatoren"},{"location":"database/operatoren/#operatoren","text":"","title":"Operatoren"},{"location":"database/operatoren/#arithmetische-operatoren","text":"k\u00f6nnen mit SELECT verwendet werden Beispiel: SELECT <attribut> + <wert>(<attribut>) FROM <tabelle>;","title":"Arithmetische Operatoren"},{"location":"database/operatoren/#vergleichsoperatoren","text":"","title":"Vergleichsoperatoren"},{"location":"database/operatoren/#zeichenoperatoren","text":"Schl\u00fcsselwort LIKE wird f\u00fcr den Vergleich von Zeichenketten verwendet Beispiel: %<muster>% SELECT * FROM <tabelle> WHERE <attribut> LIKE \u2018%<muster>%\u2018;","title":"Zeichenoperatoren"},{"location":"database/operatoren/#logische-operatoren","text":"AND OR NOT","title":"Logische Operatoren"},{"location":"database/operatoren/#mengenoperatoren","text":"","title":"Mengenoperatoren"},{"location":"includes/abbreviations/","text":"","title":"Abbreviations"},{"location":"informatik/Allgemeines/","text":"Grundlagen der Informationstechnik Begriffe Datenverarbeitung manuelle Datenverarbeitung f\u00fchrt Berechnungen und Datenmanipulationen ohne Hilfsmittel durch, basiert auf Kopfrechnen und Auswendiglernen mechanische Datenverarbeitung verwendet mechanische Hilfsmittel, z.B. mechanische Schreibmaschine oder Rechenschieber elektrische Datenverarbeitung elektrisch betriebene Ger\u00e4te werden als Hilfsmittel verwendet, z.B. elektrische Schreibmaschinen oder klassische Registrierkassen elektronische Datenverarbeitung verwendet elektronisch gesteuerte Arbeitsmittel, also Elektronenrechner oder Computer Informatik theoretische Informatik betrachet insbesondere die mathematisch-logischen Grundlagen, die der Verwendung und Proigrammierung von Computern zugrunde liegen; es geht bspw um die Berechenbarkeit und um Automatentheorien - die mathematisch-formalen Modelle, auf denen Rechner unabh\u00e4ngig von der elektronischen Machbarkeit aufbauen; technische Informatik beschreibt die elektronisch-technischen Eigenschaften der Bauteile, aus denen Computer zusammengesetzt sind; ein wichtiges Teilgebiet der technischen Informatik ist die Schaltalgebra, die Umsetzung logischer Operationen durch elektronische Schaltungen; praktische Informatik hier geht es um Programmierung von Computern und die Mittel, die dazu erforderlich sind; die Erforschung des Aufbaus von Betriebssystemen und Programmiersprachen-Compilern sowie deren Implementierung (praktische Umsetzung) sind die wichtigsten Teilgebiete; angewandte Informatik k\u00fcmmert sich um alles andere, n\u00e4mlich um s\u00e4mtliche Nutzanwendungen von Computern; das reicht von Datenbanken \u00fcber die Netzwerkkommunikation bis hin zu Grafik, Animation und Audio-&/Videobearbeitung; Assembler: Name f\u00fcr vereinfachte Schreibweise der Maschinensprache und f\u00fcr das Programm selbst; beherrschen bspw Definition sog. Makros: immer wiederkehrende Abfolgen von Befehlen erhalten einen eindeutigen Namen und k\u00f6nnen dann sp\u00e4ter unter diesem Namen aufgerufen werden; Assemblersprachen werden heute noch f\u00fcr direkte Hardware-Manipulation, Zugriff auf spezielle Prozessoranweisungen, Verwaltung von Konstanten, Verwaltung von Adressen von Befehlen / Daten oder zur L\u00f6sung kritischer Leistungsprobleme verwendet. Nach Assembler-Definition kann die \u00dcbersetzung also ganz zielgerecht an kritischen Stellen eingesetzt werden. Des Weiteren k\u00f6nnen Assembler zur Optimierung der Verarbeitungsgeschwindigkeit oder zur Optimierung der Programmgr\u00f6\u00dfe verwendet werden; Interpreter: \u00fcbersetzt den Quellcode Zeile f\u00fcr Zeile; der Code wird also w\u00e4hrend der Ausf\u00fchrung (zur Laufzeit) \u00fcbersetzt. Interpretierte Sprachen werden h\u00e4ufig auch als Skriptsprachen bezeichnet; Compiler: rzeugt ein dauerhaft lauff\u00e4higes Maschinensprachprogramm und speichert es als ausf\u00fchrbares Programm ab; Just-in-Time-Compiler: \u00fcbersetzen die Skriptsprache, bevor das Programm ausgef\u00fchr wird und der entstandene Byte-Code wird oftmals in einem Cache zwischengespeichert; Byte-Code: kann als Programm auf unterschiedlicher Hardware ausgef\u00fchrt werden; Arten von Programmiersprachen imperative oder prozedurale Programmiersprachen C oder Pascal; erlauben eine Strukturierung/ Modularisierung objektorientierte Programmiersprachen Smalltalk, C++, Java, C#; werden in wiederverwendbaren Paketen programmiert, den sogenannten Klassen; Eine Klasse ist eine allgemeine Vorlage f\u00fcr die Konstruktion von Objekten. Ein Objekt ist eine Datenstruktur, die selbst Funktionen enth\u00e4lt, um sich auf die gew\u00fcnschte Art und Weise zu verhalten. Vorteile Kapselung: Datenstrukturen au\u00dferhalb eines Objekts k\u00f6nnen nicht direkt dessen innere Daten manipulieren, sondern nur seine offiziellen Methoden (Schnittstellen nach au\u00dfen) benutzen. Dies sorgt f\u00fcr ein klares Programmdesign und sch\u00fctzt vor vielen Fehlern. Vererbung: Klassen k\u00f6nnen ihre Eigenschaften und Methoden an \"Kindklassen\" abgeben, in denen nur noch die Unterschiede programmiert werden m\u00fcssen. Dies beschleunigt die Softwareentwicklung und macht Programme noch einmal erheblich \u00fcbersichtlicher. Die wichtigsten OOPS Smalltalk: war die erste vollst\u00e4ndig objektorientierte Sprache \u00fcberhaupt. Sie wurde in den 70er-Jahren zur Programmierung der ersten grafischen Benutzeroberfl\u00e4che entwickelt. C++: ist die objektorientierte Erweiterung der Programmiersprache C und wurde von Bjarne Stroustrup entwickelt. Da C++ abw\u00e4rtskompatibel mit C ist, wurde die Sprache bald von C-Programmierern eingesetzt; ihre besonderen Vorteile als objektorientierte Sprache wurden aber erst langsam angenommen. Java: besitzt vor allem die Besonderheit, dass es sich um eine plattformunabh\u00e4ngige Sprache handelt. Sie brauchen ein Java-Programm nur einmal zu kompilieren, es l\u00e4uft innerhalb eines speziellen Programms f\u00fcr die verschiedenen Plattformen, der virtuellen Java-Maschine (JVM). C#: ist eine OOPS von Microsoft. Es handelt sich um eine der Sprachen, mit denen Anwendungen f\u00fcr das .NET Framework entwickelt werden k\u00f6nnen. Zwar betont Microsoft aus Marketingerw\u00e4gungen stets die Verwandtschaft mit C++, aber dennoch hat C# mehr mit Java gemeinsam als mt C++. Logische Programmiersprachen LISP, Prolog, Logo; Die Grundidee besteht darin, nicht den fertigen Algorithmus einzutippen und mit wechselnden Wertbelegungen vom Computer berechnen zu lassen, sondern das Grundproblem selbst zu formulieren und die Erzeugung einer m\u00f6glichst optimalen L\u00f6sung dem Compiler zu \u00fcberlassen. Logische Programmierung ist ein Programmierparadigma, das auf der mathematischen Logik beruht. Logische Sprachen verwenden die Pr\u00e4dikatenlogik zur Formulierung von Ausdr\u00fccken oder Termen; der wichtigste Vertreter ist Prolog. Funktionale Sprachen Sprachen mit \u00e4hnlichem Ansatz, aber anderer Syntax werden auch als funktionale Sprachen bezeichnet. Dazu geh\u00f6rt vor allem LISP, aber auch die Sprache Logo, die haupts\u00e4chlich entworfen wurde, um Kindern die Denkweise der Computerprogrammierung beizubringen. Als gemeinsamen Oberbegriff verwendet man manchmal die Bezeichnung deklarative Programmiersprachen . Multiparadigmen-Sprache Ruby, Python; enth\u00e4lt neben funktionalen auch objektorientierte und imperative Aspekte; Digitale Speicherung und Verarbeitung von Informationen Digital sind Informationen immer dann, wenn sie in Form von Zahlen dargestellt werden k\u00f6nnen. Genauer gesagt, werden die Daten bin\u00e4r gespeichert, also als Abfolge von Einsen und Nullen. Das ist nicht genau dasselbe wie dual . Das Dualsystem ist das mathematische Zweiersystem, w\u00e4hrend bin\u00e4r allgemein die Speicherung beliebiger Daten durch zwei verschiedene Zust\u00e4nde bezeichnet. Analogdaten werden als Welle dargestellt, digitale Daten dagegen durch eine rechteckige Form. In der Mathematik werden Objekte mit einem solchen \"Mindestabstand\" als diskrete Mengen bezeichnet. Ein Alltagsbeispiel ist die Folge der ganzen Zahlen - im Unterschied zu den rationalen oder gar reellen Zahlen, bei denen zwischen zwei beliebigen Elementen immer noch unendlich viele Zwischenwerte liegen. Die Umwandlung der analogen Eindr\u00fccke aus der Realit\u00e4t in computergeeignete digitale Daten wird als \"Digitalisierung\" bezeichnet. Je nach Datenart wird sie zum Beispiel von einem Scanner oder einer Digitalkamera bei Bildern oder von einer Soundkarte bei T\u00f6nen durchgef\u00fchrt. Digitale Bilddaten Pixelgrafik auch Bitmap-Grafik genannt, speichert ein Bild als rechteckiges Raster quadratischer Farbinformationen ab, den sogenannten Pixeln. Vektorgrafik speichert Umrisslinien und Kurven von Zeichnungen in Form mathematischer Formeln. Charakter eines Pixelbildes Aufl\u00f6sung ppi - Pixel per inch; F\u00fcr Druck sollte die Aufl\u00f6sungen etwa 300 ppi haben, f\u00fcr eine digitale Anzeige ca. 72 ppi; Farbtiefe Wie viele Bits werden zur Speicherung der Informationen eines Pixels verwendet. Je nach Farbtiefe kann eine bestimmte Anzahl verschiedener Farben eingesetzt werden. Beispielsweise erm\u00f6glicht eine Farbtiefe von 8 Bit nur 256 verschiedene Farben, 16 Bit bieten 65.536 Farben und 24 Bit sogar mehr als 16,7 Millionen. Farbkan\u00e4le additive Farbmischung (RGB) subtraktive Mischung (CMYK) F\u00fcr die Intensit\u00e4t jeder einzelnen Grundfarbe wird ein Farbkanal gespeichert. Die Farbtiefe wird dann pro Kanal angegeben, bei einem RGB-Bild mit 24 Bit Farbtiefe also beispielsweise 8 Bit (oder 256 Intensit\u00e4tsstufen) pro Kanal.","title":"Grundlagen der Informationstechnik"},{"location":"informatik/Allgemeines/#grundlagen-der-informationstechnik","text":"","title":"Grundlagen der Informationstechnik"},{"location":"informatik/Allgemeines/#begriffe","text":"","title":"Begriffe"},{"location":"informatik/Allgemeines/#datenverarbeitung","text":"manuelle Datenverarbeitung f\u00fchrt Berechnungen und Datenmanipulationen ohne Hilfsmittel durch, basiert auf Kopfrechnen und Auswendiglernen mechanische Datenverarbeitung verwendet mechanische Hilfsmittel, z.B. mechanische Schreibmaschine oder Rechenschieber elektrische Datenverarbeitung elektrisch betriebene Ger\u00e4te werden als Hilfsmittel verwendet, z.B. elektrische Schreibmaschinen oder klassische Registrierkassen elektronische Datenverarbeitung verwendet elektronisch gesteuerte Arbeitsmittel, also Elektronenrechner oder Computer","title":"Datenverarbeitung"},{"location":"informatik/Allgemeines/#informatik","text":"theoretische Informatik betrachet insbesondere die mathematisch-logischen Grundlagen, die der Verwendung und Proigrammierung von Computern zugrunde liegen; es geht bspw um die Berechenbarkeit und um Automatentheorien - die mathematisch-formalen Modelle, auf denen Rechner unabh\u00e4ngig von der elektronischen Machbarkeit aufbauen; technische Informatik beschreibt die elektronisch-technischen Eigenschaften der Bauteile, aus denen Computer zusammengesetzt sind; ein wichtiges Teilgebiet der technischen Informatik ist die Schaltalgebra, die Umsetzung logischer Operationen durch elektronische Schaltungen; praktische Informatik hier geht es um Programmierung von Computern und die Mittel, die dazu erforderlich sind; die Erforschung des Aufbaus von Betriebssystemen und Programmiersprachen-Compilern sowie deren Implementierung (praktische Umsetzung) sind die wichtigsten Teilgebiete; angewandte Informatik k\u00fcmmert sich um alles andere, n\u00e4mlich um s\u00e4mtliche Nutzanwendungen von Computern; das reicht von Datenbanken \u00fcber die Netzwerkkommunikation bis hin zu Grafik, Animation und Audio-&/Videobearbeitung; Assembler: Name f\u00fcr vereinfachte Schreibweise der Maschinensprache und f\u00fcr das Programm selbst; beherrschen bspw Definition sog. Makros: immer wiederkehrende Abfolgen von Befehlen erhalten einen eindeutigen Namen und k\u00f6nnen dann sp\u00e4ter unter diesem Namen aufgerufen werden; Assemblersprachen werden heute noch f\u00fcr direkte Hardware-Manipulation, Zugriff auf spezielle Prozessoranweisungen, Verwaltung von Konstanten, Verwaltung von Adressen von Befehlen / Daten oder zur L\u00f6sung kritischer Leistungsprobleme verwendet. Nach Assembler-Definition kann die \u00dcbersetzung also ganz zielgerecht an kritischen Stellen eingesetzt werden. Des Weiteren k\u00f6nnen Assembler zur Optimierung der Verarbeitungsgeschwindigkeit oder zur Optimierung der Programmgr\u00f6\u00dfe verwendet werden; Interpreter: \u00fcbersetzt den Quellcode Zeile f\u00fcr Zeile; der Code wird also w\u00e4hrend der Ausf\u00fchrung (zur Laufzeit) \u00fcbersetzt. Interpretierte Sprachen werden h\u00e4ufig auch als Skriptsprachen bezeichnet; Compiler: rzeugt ein dauerhaft lauff\u00e4higes Maschinensprachprogramm und speichert es als ausf\u00fchrbares Programm ab; Just-in-Time-Compiler: \u00fcbersetzen die Skriptsprache, bevor das Programm ausgef\u00fchr wird und der entstandene Byte-Code wird oftmals in einem Cache zwischengespeichert; Byte-Code: kann als Programm auf unterschiedlicher Hardware ausgef\u00fchrt werden;","title":"Informatik"},{"location":"informatik/Allgemeines/#arten-von-programmiersprachen","text":"","title":"Arten von Programmiersprachen"},{"location":"informatik/Allgemeines/#imperative-oder-prozedurale-programmiersprachen","text":"C oder Pascal; erlauben eine Strukturierung/ Modularisierung","title":"imperative oder prozedurale Programmiersprachen"},{"location":"informatik/Allgemeines/#objektorientierte-programmiersprachen","text":"Smalltalk, C++, Java, C#; werden in wiederverwendbaren Paketen programmiert, den sogenannten Klassen; Eine Klasse ist eine allgemeine Vorlage f\u00fcr die Konstruktion von Objekten. Ein Objekt ist eine Datenstruktur, die selbst Funktionen enth\u00e4lt, um sich auf die gew\u00fcnschte Art und Weise zu verhalten.","title":"objektorientierte Programmiersprachen"},{"location":"informatik/Allgemeines/#vorteile","text":"Kapselung: Datenstrukturen au\u00dferhalb eines Objekts k\u00f6nnen nicht direkt dessen innere Daten manipulieren, sondern nur seine offiziellen Methoden (Schnittstellen nach au\u00dfen) benutzen. Dies sorgt f\u00fcr ein klares Programmdesign und sch\u00fctzt vor vielen Fehlern. Vererbung: Klassen k\u00f6nnen ihre Eigenschaften und Methoden an \"Kindklassen\" abgeben, in denen nur noch die Unterschiede programmiert werden m\u00fcssen. Dies beschleunigt die Softwareentwicklung und macht Programme noch einmal erheblich \u00fcbersichtlicher.","title":"Vorteile"},{"location":"informatik/Allgemeines/#die-wichtigsten-oops","text":"Smalltalk: war die erste vollst\u00e4ndig objektorientierte Sprache \u00fcberhaupt. Sie wurde in den 70er-Jahren zur Programmierung der ersten grafischen Benutzeroberfl\u00e4che entwickelt. C++: ist die objektorientierte Erweiterung der Programmiersprache C und wurde von Bjarne Stroustrup entwickelt. Da C++ abw\u00e4rtskompatibel mit C ist, wurde die Sprache bald von C-Programmierern eingesetzt; ihre besonderen Vorteile als objektorientierte Sprache wurden aber erst langsam angenommen. Java: besitzt vor allem die Besonderheit, dass es sich um eine plattformunabh\u00e4ngige Sprache handelt. Sie brauchen ein Java-Programm nur einmal zu kompilieren, es l\u00e4uft innerhalb eines speziellen Programms f\u00fcr die verschiedenen Plattformen, der virtuellen Java-Maschine (JVM). C#: ist eine OOPS von Microsoft. Es handelt sich um eine der Sprachen, mit denen Anwendungen f\u00fcr das .NET Framework entwickelt werden k\u00f6nnen. Zwar betont Microsoft aus Marketingerw\u00e4gungen stets die Verwandtschaft mit C++, aber dennoch hat C# mehr mit Java gemeinsam als mt C++.","title":"Die wichtigsten OOPS"},{"location":"informatik/Allgemeines/#logische-programmiersprachen","text":"LISP, Prolog, Logo; Die Grundidee besteht darin, nicht den fertigen Algorithmus einzutippen und mit wechselnden Wertbelegungen vom Computer berechnen zu lassen, sondern das Grundproblem selbst zu formulieren und die Erzeugung einer m\u00f6glichst optimalen L\u00f6sung dem Compiler zu \u00fcberlassen. Logische Programmierung ist ein Programmierparadigma, das auf der mathematischen Logik beruht. Logische Sprachen verwenden die Pr\u00e4dikatenlogik zur Formulierung von Ausdr\u00fccken oder Termen; der wichtigste Vertreter ist Prolog.","title":"Logische Programmiersprachen"},{"location":"informatik/Allgemeines/#funktionale-sprachen","text":"Sprachen mit \u00e4hnlichem Ansatz, aber anderer Syntax werden auch als funktionale Sprachen bezeichnet. Dazu geh\u00f6rt vor allem LISP, aber auch die Sprache Logo, die haupts\u00e4chlich entworfen wurde, um Kindern die Denkweise der Computerprogrammierung beizubringen. Als gemeinsamen Oberbegriff verwendet man manchmal die Bezeichnung deklarative Programmiersprachen .","title":"Funktionale Sprachen"},{"location":"informatik/Allgemeines/#multiparadigmen-sprache","text":"Ruby, Python; enth\u00e4lt neben funktionalen auch objektorientierte und imperative Aspekte;","title":"Multiparadigmen-Sprache"},{"location":"informatik/Allgemeines/#digitale-speicherung-und-verarbeitung-von-informationen","text":"Digital sind Informationen immer dann, wenn sie in Form von Zahlen dargestellt werden k\u00f6nnen. Genauer gesagt, werden die Daten bin\u00e4r gespeichert, also als Abfolge von Einsen und Nullen. Das ist nicht genau dasselbe wie dual . Das Dualsystem ist das mathematische Zweiersystem, w\u00e4hrend bin\u00e4r allgemein die Speicherung beliebiger Daten durch zwei verschiedene Zust\u00e4nde bezeichnet. Analogdaten werden als Welle dargestellt, digitale Daten dagegen durch eine rechteckige Form. In der Mathematik werden Objekte mit einem solchen \"Mindestabstand\" als diskrete Mengen bezeichnet. Ein Alltagsbeispiel ist die Folge der ganzen Zahlen - im Unterschied zu den rationalen oder gar reellen Zahlen, bei denen zwischen zwei beliebigen Elementen immer noch unendlich viele Zwischenwerte liegen. Die Umwandlung der analogen Eindr\u00fccke aus der Realit\u00e4t in computergeeignete digitale Daten wird als \"Digitalisierung\" bezeichnet. Je nach Datenart wird sie zum Beispiel von einem Scanner oder einer Digitalkamera bei Bildern oder von einer Soundkarte bei T\u00f6nen durchgef\u00fchrt.","title":"Digitale Speicherung und Verarbeitung von Informationen"},{"location":"informatik/Allgemeines/#digitale-bilddaten","text":"","title":"Digitale Bilddaten"},{"location":"informatik/Allgemeines/#pixelgrafik","text":"auch Bitmap-Grafik genannt, speichert ein Bild als rechteckiges Raster quadratischer Farbinformationen ab, den sogenannten Pixeln.","title":"Pixelgrafik"},{"location":"informatik/Allgemeines/#vektorgrafik","text":"speichert Umrisslinien und Kurven von Zeichnungen in Form mathematischer Formeln.","title":"Vektorgrafik"},{"location":"informatik/Allgemeines/#charakter-eines-pixelbildes","text":"","title":"Charakter eines Pixelbildes"},{"location":"informatik/Allgemeines/#auflosung","text":"ppi - Pixel per inch; F\u00fcr Druck sollte die Aufl\u00f6sungen etwa 300 ppi haben, f\u00fcr eine digitale Anzeige ca. 72 ppi;","title":"Aufl\u00f6sung"},{"location":"informatik/Allgemeines/#farbtiefe","text":"Wie viele Bits werden zur Speicherung der Informationen eines Pixels verwendet. Je nach Farbtiefe kann eine bestimmte Anzahl verschiedener Farben eingesetzt werden. Beispielsweise erm\u00f6glicht eine Farbtiefe von 8 Bit nur 256 verschiedene Farben, 16 Bit bieten 65.536 Farben und 24 Bit sogar mehr als 16,7 Millionen.","title":"Farbtiefe"},{"location":"informatik/Allgemeines/#farbkanale","text":"additive Farbmischung (RGB) subtraktive Mischung (CMYK) F\u00fcr die Intensit\u00e4t jeder einzelnen Grundfarbe wird ein Farbkanal gespeichert. Die Farbtiefe wird dann pro Kanal angegeben, bei einem RGB-Bild mit 24 Bit Farbtiefe also beispielsweise 8 Bit (oder 256 Intensit\u00e4tsstufen) pro Kanal.","title":"Farbkan\u00e4le"},{"location":"informatik/Allgemeines/#_1","text":"","title":""},{"location":"javascript/basics/","text":"Output JavaScript can \"display\" data in different ways: Writing into an HTML element, using **innerHTML**. Writing into the HTML output using document.**write()**. Writing into an alert box, using **window.alert()**. Writing into the browser console, using **console.log()**. document.getElementById(\"demo\").innerHTML = 5 + 6; //document.write(5 + 6); ACHTUNG! \u00dcberschreibt das bereits existierende HTML BestPractice: <button type=\"button\" onclick=\"document.write(5 + 6)\">Try it</button> alert(5 + 6); console.log(5 + 6); window.print() : gibt den Inhalt des aktuellen Fensters aus","title":"Output"},{"location":"javascript/basics/#output","text":"JavaScript can \"display\" data in different ways: Writing into an HTML element, using **innerHTML**. Writing into the HTML output using document.**write()**. Writing into an alert box, using **window.alert()**. Writing into the browser console, using **console.log()**. document.getElementById(\"demo\").innerHTML = 5 + 6; //document.write(5 + 6); ACHTUNG! \u00dcberschreibt das bereits existierende HTML BestPractice: <button type=\"button\" onclick=\"document.write(5 + 6)\">Try it</button> alert(5 + 6); console.log(5 + 6); window.print() : gibt den Inhalt des aktuellen Fensters aus","title":"Output"},{"location":"linux/Rechte/","text":"Rechte \u00dcbersicht chmod change mode / ver\u00e4ndert die Zugriffsrechte von Dateien chgrp change group/ legt die Gruppenzugeh\u00f6rigkeit von Dateien fest chattr ver\u00e4ndert Datei-Attribute und Rechte auf ext2- und ext3-Dateisystemen chown change owner / wechselt den Besitzer chmod Syntax: chmod [Optionen] Modus Datei/Verzeichnis [Datei/Verzeichnis 2 [...]] Modi: Symbolischer Modus Benutzerkategorien und Zugriffsrechte sind Buchstaben zugeordnet. Teil | Benutzertyp (Kombinationen m\u00f6glich) Teil | Operator (+ setzt Rechte, - entzieht Rechte, = nur explizit angegebene Rechte werden gesetzt, die restlichen entzogen) Teil | Rechte (Kombinationen m\u00f6glich) Rechte Recht Bedeutung a+x oder ugo+x Eine Datei f\u00fcr alle Nutzer ausf\u00fchrbar machen. u+r Der Eigent\u00fcmer darf (zus\u00e4tzlich zu vorhandenen Rechten) lesen. a+w oder ugo+w Alle d\u00fcrfen zus\u00e4tzlich zu vorhandenen Rechten schreiben. g-w Der Gruppe werden die Schreibrechte entzogen. o=r Andere Benutzer d\u00fcrfen nur lesen, nicht schreiben oder ausf\u00fchren. g=rw Die Gruppe darf lesen und schreiben, ein eventuell vorhandenes Ausf\u00fchrungsrecht wird entfernt. u+s Setzt das SetUID-Bit Oktal-Modus Die Rechte werden \u00fcber eine dreistellige Oktal-Zahl definiert. Benutzertyp Symbolischer Modus Oktalmodus Besitzer der Datei u 1. Ziffer Gruppe der Datei g 2. Ziffer Andere Benutzer o 3. Ziffer Besitzer, Gruppe und Andere a Wert Recht 0 Keine 1 x 2 w 3 w+x 4 r 5 r+x 6 r+w 7 r+w+x Optionen Option Beschreibung -R , --recursive \u00e4ndert die Zugriffsrechte von Dateien und Verzeichnissen rekursiv, d.h. auch f\u00fcr Unterverzeichnisse und Dateien darin -v , --verbose Ausgabe einer Diagnose f\u00fcr jede verarbeitete Datei -c , --changes Wie --verbose , aber nur, wenn auch etwas ge\u00e4ndert wird -f , --silent , --quiet Unterdr\u00fccken der meisten Fehlermeldungen chgrp Syntax chgrp [Option] Gruppe Datei ... Optionen Option Beschreibung -c oder --changes Diese Option zeigt die Dateien an, die ge\u00e4ndert werden. -f oder --force Fehlermeldungen werden unterdr\u00fcckt (keine Fehlermeldungen). -v oder --verbose Diese Option zeigt alles was chgrp macht. -R oder --recursive Diese Option erm\u00f6glicht das rekursive \u00c4ndern von Verzeichnissen. chown Syntax chown [OPTIONEN] [BENUTZER][:[GRUPPE]] DATEI Optionen Option Beschreibung -c oder --changes es werden (nur) die Dateien angezeigt, deren Besitzer tats\u00e4chlich ver\u00e4ndert wird -f oder --force Fehlermeldungen wegen fehlgeschlagener \u00c4nderungsversuche werden unterdr\u00fcckt -v oder --verbose alle Aktionen werden angezeigt -R oder --recursive der Besitzer aller Dateien in den Unterverzeichnissen wird ebenfalls ge\u00e4ndert Kombinationsm\u00f6glichkeiten von Besitzer und Gruppe Kombination Bedeutung besitzer_name:gruppen_name Benutzer und Gruppe werden auf einen Schlag gesetzt :gruppen_name Die Gruppe wird gesetzt, wohingegen der Besitzer unver\u00e4ndert bleibt- besitzer_name: Der Besitzer wird auf besitzer_name - und die Gruppe auf die Standardgruppe des eingeloggten Benutzers gesetzt besitzer_name Ausschlie\u00dflich der Besitzer wird gesetzt","title":"Rechte"},{"location":"linux/Rechte/#rechte","text":"","title":"Rechte"},{"location":"linux/Rechte/#ubersicht","text":"chmod change mode / ver\u00e4ndert die Zugriffsrechte von Dateien chgrp change group/ legt die Gruppenzugeh\u00f6rigkeit von Dateien fest chattr ver\u00e4ndert Datei-Attribute und Rechte auf ext2- und ext3-Dateisystemen chown change owner / wechselt den Besitzer","title":"\u00dcbersicht"},{"location":"linux/Rechte/#chmod","text":"","title":"chmod"},{"location":"linux/Rechte/#syntax","text":"chmod [Optionen] Modus Datei/Verzeichnis [Datei/Verzeichnis 2 [...]]","title":"Syntax:"},{"location":"linux/Rechte/#modi","text":"","title":"Modi:"},{"location":"linux/Rechte/#symbolischer-modus","text":"Benutzerkategorien und Zugriffsrechte sind Buchstaben zugeordnet. Teil | Benutzertyp (Kombinationen m\u00f6glich) Teil | Operator (+ setzt Rechte, - entzieht Rechte, = nur explizit angegebene Rechte werden gesetzt, die restlichen entzogen) Teil | Rechte (Kombinationen m\u00f6glich)","title":"Symbolischer Modus"},{"location":"linux/Rechte/#rechte_1","text":"Recht Bedeutung a+x oder ugo+x Eine Datei f\u00fcr alle Nutzer ausf\u00fchrbar machen. u+r Der Eigent\u00fcmer darf (zus\u00e4tzlich zu vorhandenen Rechten) lesen. a+w oder ugo+w Alle d\u00fcrfen zus\u00e4tzlich zu vorhandenen Rechten schreiben. g-w Der Gruppe werden die Schreibrechte entzogen. o=r Andere Benutzer d\u00fcrfen nur lesen, nicht schreiben oder ausf\u00fchren. g=rw Die Gruppe darf lesen und schreiben, ein eventuell vorhandenes Ausf\u00fchrungsrecht wird entfernt. u+s Setzt das SetUID-Bit","title":"Rechte"},{"location":"linux/Rechte/#oktal-modus","text":"Die Rechte werden \u00fcber eine dreistellige Oktal-Zahl definiert. Benutzertyp Symbolischer Modus Oktalmodus Besitzer der Datei u 1. Ziffer Gruppe der Datei g 2. Ziffer Andere Benutzer o 3. Ziffer Besitzer, Gruppe und Andere a Wert Recht 0 Keine 1 x 2 w 3 w+x 4 r 5 r+x 6 r+w 7 r+w+x","title":"Oktal-Modus"},{"location":"linux/Rechte/#optionen","text":"Option Beschreibung -R , --recursive \u00e4ndert die Zugriffsrechte von Dateien und Verzeichnissen rekursiv, d.h. auch f\u00fcr Unterverzeichnisse und Dateien darin -v , --verbose Ausgabe einer Diagnose f\u00fcr jede verarbeitete Datei -c , --changes Wie --verbose , aber nur, wenn auch etwas ge\u00e4ndert wird -f , --silent , --quiet Unterdr\u00fccken der meisten Fehlermeldungen","title":"Optionen"},{"location":"linux/Rechte/#chgrp","text":"","title":"chgrp"},{"location":"linux/Rechte/#syntax_1","text":"chgrp [Option] Gruppe Datei ...","title":"Syntax"},{"location":"linux/Rechte/#optionen_1","text":"Option Beschreibung -c oder --changes Diese Option zeigt die Dateien an, die ge\u00e4ndert werden. -f oder --force Fehlermeldungen werden unterdr\u00fcckt (keine Fehlermeldungen). -v oder --verbose Diese Option zeigt alles was chgrp macht. -R oder --recursive Diese Option erm\u00f6glicht das rekursive \u00c4ndern von Verzeichnissen.","title":"Optionen"},{"location":"linux/Rechte/#chown","text":"","title":"chown"},{"location":"linux/Rechte/#syntax_2","text":"chown [OPTIONEN] [BENUTZER][:[GRUPPE]] DATEI","title":"Syntax"},{"location":"linux/Rechte/#optionen_2","text":"Option Beschreibung -c oder --changes es werden (nur) die Dateien angezeigt, deren Besitzer tats\u00e4chlich ver\u00e4ndert wird -f oder --force Fehlermeldungen wegen fehlgeschlagener \u00c4nderungsversuche werden unterdr\u00fcckt -v oder --verbose alle Aktionen werden angezeigt -R oder --recursive der Besitzer aller Dateien in den Unterverzeichnissen wird ebenfalls ge\u00e4ndert Kombinationsm\u00f6glichkeiten von Besitzer und Gruppe Kombination Bedeutung besitzer_name:gruppen_name Benutzer und Gruppe werden auf einen Schlag gesetzt :gruppen_name Die Gruppe wird gesetzt, wohingegen der Besitzer unver\u00e4ndert bleibt- besitzer_name: Der Besitzer wird auf besitzer_name - und die Gruppe auf die Standardgruppe des eingeloggten Benutzers gesetzt besitzer_name Ausschlie\u00dflich der Besitzer wird gesetzt","title":"Optionen"},{"location":"linux/basics/","text":"Linux command basics Befehl Syntax Definition move mv [/alterpfad/] [/neuerpfad/] verschiebt Ordner ls ls [optionen] [ordner] zeigt Inhalt eines Verzeichnisses (Kurzform) ls -a all / zeigt alle Dateien und versteckte Dateien die mit \".\" beginnen ls -h human-readable ls -l long listing format / Inhalt des Verzeichnisses (Langform) cd cd [pfad] wechselt ohne Args in das User-Verzeichnis cd .. wechselt in die h\u00f6here Ebene cp cp [optionen] quelle ziel kopiert Dateien und Verzeichnisse cp -a archive / kopiert 1:1 cp -r rekursive / kopiert auch alle Ordner und Unterordner cp -v verbose / zeigt an was der Befehl cp gerade macht","title":"Linux command basics"},{"location":"linux/basics/#linux-command-basics","text":"Befehl Syntax Definition move mv [/alterpfad/] [/neuerpfad/] verschiebt Ordner ls ls [optionen] [ordner] zeigt Inhalt eines Verzeichnisses (Kurzform) ls -a all / zeigt alle Dateien und versteckte Dateien die mit \".\" beginnen ls -h human-readable ls -l long listing format / Inhalt des Verzeichnisses (Langform) cd cd [pfad] wechselt ohne Args in das User-Verzeichnis cd .. wechselt in die h\u00f6here Ebene cp cp [optionen] quelle ziel kopiert Dateien und Verzeichnisse cp -a archive / kopiert 1:1 cp -r rekursive / kopiert auch alle Ordner und Unterordner cp -v verbose / zeigt an was der Befehl cp gerade macht","title":"Linux command basics"},{"location":"linux/webserver_einrichten/","text":"Falsche Berechtigung f\u00fcr sudo /etc/sudo.conf is owned by uid 1000, should be 0 pkexec chown root:root /etc/sudoers /etc/sudoers.d -R Datei/ Paket finden where is + Name Apache-Webserver installieren lokalen Paketindex aktualisieren, um alle neuen \u00c4nderungen im Upstream widerzuspiegeln: sudo apt update Apache2 installieren: sudo apt install apache2 Firewall anpassen Anwendungsprofile auflisten lassen: sudo ufw app list restriktivste Profil aktivieren: sudo ufw allow 'Apache' Status anzeigen lassen: sudo ufw status Webserver testen \u00dcberpr\u00fcfung ob Dienst ausgef\u00fchrt wird: sudo systemctl status apache2 Adressen anzeigen lassen, unter denen apache l\u00e4uft: hostname -I Verwalten des Apache-Prozesses Webserver stoppen: sudo systemctl stop apache2 starten: sudo systemctl start apache2 neustarten: sudo systemctl restart apache2 neuladen ohne Verbindung zu trennen: sudo systemctl reload apache2 kein automatischer Start beim Booten: sudo systemctl disable apache2 automatischer Start beim Booten: sudo systemctl enable apache2 Virtuelle Hosts einrichten Verzeichnis erstellen: sudo mkdir /var/www/wpenv Eigentum zuweisen: sudo chown -R $USER:$USER /var/www/wpenv Berechtigungen - nur Eigent\u00fcmer hat alle Berechtigungen, Gruppen und andere nur Lese- und Ausf\u00fchrungsberechtigungen sudo chmod -R 755 /var/www/your_domain Neue Datei unter /etc/apache2/sites-available/wpenv.conf erstellen: <VirtualHost *:80> ServerAdmin webmaster@localhost ServerName wpenv ServerAlias www.wpenv DocumentRoot /var/www/wpenv ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Aktivieren \u00fcber Tool a2ensite: sudo a2ensite your_domain.conf Deaktivieren der unter 000-default.conf definierten Standard-Site: sudo a2dissite 000-default.conf Testen auf Konfigurationsfehler: sudo apache2ctl configtest Apache neustarten: sudo systemctl restart apache2 PHP installieren PHP installieren: sudo apt-get install libapache2-mod-php MySQL-Modul f\u00fcr PHP installieren: sudo apt-get install php-mysql MySQL installieren MySQL-Server installieren: sudo apt-get install mysql-server Sicherheit: sudo mysql_secure_installation Datenbank f\u00fcr WP anlegen als root einloggen: mysql -u root -p Datenbank anlegen: create database wordpress; Ordner on the fly als Subdomain nutzen hosts-file bearbeiten: sudo nano /etc/hosts Domain festlegen: 127.0.0.1 localhost 127.0.0.1 dev.localhost {{ macros_info() }}","title":"Webserver einrichten"},{"location":"linux/webserver_einrichten/#falsche-berechtigung-fur-sudo","text":"/etc/sudo.conf is owned by uid 1000, should be 0 pkexec chown root:root /etc/sudoers /etc/sudoers.d -R","title":"Falsche Berechtigung f\u00fcr sudo"},{"location":"linux/webserver_einrichten/#datei-paket-finden","text":"where is + Name","title":"Datei/ Paket finden"},{"location":"linux/webserver_einrichten/#apache-webserver-installieren","text":"lokalen Paketindex aktualisieren, um alle neuen \u00c4nderungen im Upstream widerzuspiegeln: sudo apt update Apache2 installieren: sudo apt install apache2","title":"Apache-Webserver installieren"},{"location":"linux/webserver_einrichten/#firewall-anpassen","text":"Anwendungsprofile auflisten lassen: sudo ufw app list restriktivste Profil aktivieren: sudo ufw allow 'Apache' Status anzeigen lassen: sudo ufw status","title":"Firewall anpassen"},{"location":"linux/webserver_einrichten/#webserver-testen","text":"\u00dcberpr\u00fcfung ob Dienst ausgef\u00fchrt wird: sudo systemctl status apache2 Adressen anzeigen lassen, unter denen apache l\u00e4uft: hostname -I","title":"Webserver testen"},{"location":"linux/webserver_einrichten/#verwalten-des-apache-prozesses","text":"Webserver stoppen: sudo systemctl stop apache2 starten: sudo systemctl start apache2 neustarten: sudo systemctl restart apache2 neuladen ohne Verbindung zu trennen: sudo systemctl reload apache2 kein automatischer Start beim Booten: sudo systemctl disable apache2 automatischer Start beim Booten: sudo systemctl enable apache2","title":"Verwalten des Apache-Prozesses"},{"location":"linux/webserver_einrichten/#virtuelle-hosts-einrichten","text":"Verzeichnis erstellen: sudo mkdir /var/www/wpenv Eigentum zuweisen: sudo chown -R $USER:$USER /var/www/wpenv Berechtigungen - nur Eigent\u00fcmer hat alle Berechtigungen, Gruppen und andere nur Lese- und Ausf\u00fchrungsberechtigungen sudo chmod -R 755 /var/www/your_domain Neue Datei unter /etc/apache2/sites-available/wpenv.conf erstellen: <VirtualHost *:80> ServerAdmin webmaster@localhost ServerName wpenv ServerAlias www.wpenv DocumentRoot /var/www/wpenv ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Aktivieren \u00fcber Tool a2ensite: sudo a2ensite your_domain.conf Deaktivieren der unter 000-default.conf definierten Standard-Site: sudo a2dissite 000-default.conf Testen auf Konfigurationsfehler: sudo apache2ctl configtest Apache neustarten: sudo systemctl restart apache2","title":"Virtuelle Hosts einrichten"},{"location":"linux/webserver_einrichten/#php-installieren","text":"PHP installieren: sudo apt-get install libapache2-mod-php MySQL-Modul f\u00fcr PHP installieren: sudo apt-get install php-mysql","title":"PHP installieren"},{"location":"linux/webserver_einrichten/#mysql-installieren","text":"MySQL-Server installieren: sudo apt-get install mysql-server Sicherheit: sudo mysql_secure_installation","title":"MySQL installieren"},{"location":"linux/webserver_einrichten/#datenbank-fur-wp-anlegen","text":"als root einloggen: mysql -u root -p Datenbank anlegen: create database wordpress;","title":"Datenbank f\u00fcr WP anlegen"},{"location":"linux/webserver_einrichten/#ordner-on-the-fly-als-subdomain-nutzen","text":"hosts-file bearbeiten: sudo nano /etc/hosts Domain festlegen: 127.0.0.1 localhost 127.0.0.1 dev.localhost","title":"Ordner on the fly als Subdomain nutzen"},{"location":"linux/webserver_einrichten/#_1","text":"{{ macros_info() }}","title":""},{"location":"php/datentypen/","text":"PHP Datentypen string Text $name = 'Max'; echo $name; // => Max echo 'Hallo $name!'; // => Hallo $name! $name = \"Max\"; echo \"Hallo $name!\"; // => Hallo Max! in einfachen oder doppelten Anf\u00fchrungszeichen; doppelte Anf\u00fchrungszeichen haben Funktionen: - \"Escape-Sequenzen\" (*/t* = Tabulator, */n* = Zeilenumbruch) - \"Aufl\u00f6sung\" von Variablen in Werte - Maskierung mit Backslash (Anf\u00fchrungszeichen im String werden maskiert) - Konkatenation int (integer) Ganzzahl arithmetische Operationen, arithmetische Zuweisungsoperatoren (+=), increment/ decrement-Operatoren bool (boolean) true/ false double, float, real Flie\u00dfkommazahl null ein nicht existierender Wert binary Bin\u00e4rdaten resource Referenzen auf externe Ressource Da resource-Variablen spezielle Referenzen auf ge\u00f6ffnete Dateien, Datenbankverbindungen, Grafikbereiche usw. enthalten, ist die Konvertierung von resource nicht sinnvoll. never void relative class types self, parent and static literal false/ true Composite Types object Instanz einer Klasse kann aus mehreren Eigenschaften und Methoden bestehen array Sammlung von Werten kann aus verschiedenen Datentypen bestehen und ist sehr flexibel class Vorlage f\u00fcr Objekte kann als Vorlage f\u00fcr die Erstellung von Objekten verwendet werden; besteht aus Eigenschaften und Methoden und kann auch von anderen Klassen erben Intersection Types (&) ab PHP 8.0 Mithilfe vom &-Operator k\u00f6nnen mehrere Typen kombiniert werden. T&U => Typ T UND Typ U Union Types (|) ab PHP 8.0 Mit dem Pipe-(|)-Operator kann man eine ODER-Funktion kombinieren. T|U => Typ T ODER Typ U Daten konvertieren Casting $zahl = \"1\"; var_dump($zahl); echo \"<br />\"; $zahl = (int) $zahl; var_dump($zahl); Output: string(1) \"1\"; int(1); Type Juggling PHP kann automatisch mit den Dateitypen \"jonglieren\". D.h. im Kontext konvertiert PHP den Dateityp: numeric float, int string echo, print, concatenation, string interpolation logical < , =, >, AND, OR, XOR, !, &&, ||; => bool integral and string &, |, ^(XOR), ~ (Nicht), < < , >> comparative ==, ===, !=, < >, !==, < , >, < =, >=, < => function wenn ein R\u00fcckgabewert deklariert wurde; der Wert muss dem deklarierten Wert des Typs entsprechen; Ausnahmen: Wert ist vom Typ int und der deklarierte Typ ist float => int wird in float konvertiert; Wenn der deklarierte Wert ein scalar type ist, wird der Wert in einen scalar type konvertiert und der \"coercive typing mode\" (none-strict) ist aktiviert weitere Funktionen intval variable -> integer floatval/ doubleval variable -> float strval variable -> string settype liefert bool zur\u00fcck, der angibt ob die Konvertierung erfolgreich war; Variable wird als Referenz \u00fcbergeben; var_dump gibt Datentyp und Wert aus gettype liest den Datentyp aus is_int \u00fcberpr\u00fcft auf Datentyp integer (Achtung, bei 1.0 kommt false zur\u00fcck) is_float is_numeric \u00fcberpr\u00fcft auf Datentyp numerisch is_array is_bool is_nan is_object is_resource is_string empty \u00fcberpr\u00fcft ob die variable leer ist (Vorsicht, leer ist dehnbarer Begriff) isset Gegenteil von is_null (Vorsicht) Verkn\u00fcpfungsoperator . (Punkt) verkn\u00fcpfender Zuweisungsoperator .= (Concatenation)","title":"PHP"},{"location":"php/datentypen/#php","text":"","title":"PHP"},{"location":"php/datentypen/#datentypen","text":"string Text $name = 'Max'; echo $name; // => Max echo 'Hallo $name!'; // => Hallo $name! $name = \"Max\"; echo \"Hallo $name!\"; // => Hallo Max! in einfachen oder doppelten Anf\u00fchrungszeichen; doppelte Anf\u00fchrungszeichen haben Funktionen: - \"Escape-Sequenzen\" (*/t* = Tabulator, */n* = Zeilenumbruch) - \"Aufl\u00f6sung\" von Variablen in Werte - Maskierung mit Backslash (Anf\u00fchrungszeichen im String werden maskiert) - Konkatenation int (integer) Ganzzahl arithmetische Operationen, arithmetische Zuweisungsoperatoren (+=), increment/ decrement-Operatoren bool (boolean) true/ false double, float, real Flie\u00dfkommazahl null ein nicht existierender Wert binary Bin\u00e4rdaten resource Referenzen auf externe Ressource Da resource-Variablen spezielle Referenzen auf ge\u00f6ffnete Dateien, Datenbankverbindungen, Grafikbereiche usw. enthalten, ist die Konvertierung von resource nicht sinnvoll. never void relative class types self, parent and static literal false/ true","title":"Datentypen"},{"location":"php/datentypen/#composite-types","text":"object Instanz einer Klasse kann aus mehreren Eigenschaften und Methoden bestehen array Sammlung von Werten kann aus verschiedenen Datentypen bestehen und ist sehr flexibel class Vorlage f\u00fcr Objekte kann als Vorlage f\u00fcr die Erstellung von Objekten verwendet werden; besteht aus Eigenschaften und Methoden und kann auch von anderen Klassen erben","title":"Composite Types"},{"location":"php/datentypen/#intersection-types","text":"ab PHP 8.0 Mithilfe vom &-Operator k\u00f6nnen mehrere Typen kombiniert werden. T&U => Typ T UND Typ U","title":"Intersection Types (&amp;)"},{"location":"php/datentypen/#union-types","text":"ab PHP 8.0 Mit dem Pipe-(|)-Operator kann man eine ODER-Funktion kombinieren. T|U => Typ T ODER Typ U","title":"Union Types (|)"},{"location":"php/datentypen/#daten-konvertieren","text":"","title":"Daten konvertieren"},{"location":"php/datentypen/#casting","text":"$zahl = \"1\"; var_dump($zahl); echo \"<br />\"; $zahl = (int) $zahl; var_dump($zahl); Output: string(1) \"1\"; int(1);","title":"Casting"},{"location":"php/datentypen/#type-juggling","text":"PHP kann automatisch mit den Dateitypen \"jonglieren\". D.h. im Kontext konvertiert PHP den Dateityp: numeric float, int string echo, print, concatenation, string interpolation logical < , =, >, AND, OR, XOR, !, &&, ||; => bool integral and string &, |, ^(XOR), ~ (Nicht), < < , >> comparative ==, ===, !=, < >, !==, < , >, < =, >=, < => function wenn ein R\u00fcckgabewert deklariert wurde; der Wert muss dem deklarierten Wert des Typs entsprechen; Ausnahmen: Wert ist vom Typ int und der deklarierte Typ ist float => int wird in float konvertiert; Wenn der deklarierte Wert ein scalar type ist, wird der Wert in einen scalar type konvertiert und der \"coercive typing mode\" (none-strict) ist aktiviert","title":"Type Juggling"},{"location":"php/datentypen/#weitere-funktionen","text":"intval variable -> integer floatval/ doubleval variable -> float strval variable -> string settype liefert bool zur\u00fcck, der angibt ob die Konvertierung erfolgreich war; Variable wird als Referenz \u00fcbergeben; var_dump gibt Datentyp und Wert aus gettype liest den Datentyp aus is_int \u00fcberpr\u00fcft auf Datentyp integer (Achtung, bei 1.0 kommt false zur\u00fcck) is_float is_numeric \u00fcberpr\u00fcft auf Datentyp numerisch is_array is_bool is_nan is_object is_resource is_string empty \u00fcberpr\u00fcft ob die variable leer ist (Vorsicht, leer ist dehnbarer Begriff) isset Gegenteil von is_null (Vorsicht)","title":"weitere Funktionen"},{"location":"php/datentypen/#verknupfungsoperator","text":". (Punkt)","title":"Verkn\u00fcpfungsoperator"},{"location":"php/datentypen/#verknupfender-zuweisungsoperator","text":".= (Concatenation)","title":"verkn\u00fcpfender Zuweisungsoperator"},{"location":"php/konfiguration/","text":"php.ini Arbeitsspeicher memory_limit = 128M begrenzt den verf\u00fcgbaren Arbeitsspeicher Laufzeit ini_set() diese Einstellungen haben Vorrang vor den Einstellungen der php.ini ini_get() liest eine PHP Einstellung aus Erweiterungen extension = \"Name\" aktiviert Erweiterung Fehlersichtbarkeit display_errors = Off Fehleranzeige aus error_log = \"Pfad\" protokolliert die Fehler in den angegebenen Pfad error_reporting = E_ALL alle Fehlertypen werden gemeldet weitere Einstellungen","title":"php.ini"},{"location":"php/konfiguration/#phpini","text":"Arbeitsspeicher memory_limit = 128M begrenzt den verf\u00fcgbaren Arbeitsspeicher Laufzeit ini_set() diese Einstellungen haben Vorrang vor den Einstellungen der php.ini ini_get() liest eine PHP Einstellung aus Erweiterungen extension = \"Name\" aktiviert Erweiterung Fehlersichtbarkeit display_errors = Off Fehleranzeige aus error_log = \"Pfad\" protokolliert die Fehler in den angegebenen Pfad error_reporting = E_ALL alle Fehlertypen werden gemeldet weitere Einstellungen","title":"php.ini"},{"location":"python/exception_handling/","text":"Exception Handling Errors lassen das Programm abbrechen, darum gibt das Exception Handling um das Programm weiterlaufen zu lassen. (Fehlerbehandlung) Error-Typen - Exception (Mutterklasse der Fehler) - TypeError - ImportError - ModuleNotFoundError - ZeroDivisionError - SyntaxError Try-Except Exception wird abgefangen und der Code wird fortgef\u00fchrt Exception wird abgefangen und die Exception wird eine Ebene nach oben \"geworfen\" (Exception Chaining) Fehler wird nicht abgefangen und die Funktion bricht ab beim Funktionsaufruf Try: <Operation> except <Fehler1> <Handling1> except <Fehler2> <Handling2> finally kann an Try-Except drangeh\u00e4ngt werden dieser Block wird unabh\u00e4ngig von Fehlern immer ausgef\u00fchrt Assert Das Schl\u00fcsselwort assert definiert eine Bedingung, die essentiell f\u00fcr das Programm ist. Sie muss True ergeben, sonst f\u00fchrt sie zum Abbruch des Programms. - wird haupts\u00e4chlich im Entwicklungsmodus angewandt, um festzustellen an welchen Stellen ein Fehler auftritt - Wenn alles in Ordnung ist, wird kein Fehler angezeigt und das Terminal bleibt leer - Beispiel: import math assert math.log(1) == 0 # True assert math.sqrt(4) == 1 # False Traceback zeigt - Fehlerort - Fehlerstelle und - Fehlertyp Fehler erzeugen (raise) Durch das Schl\u00fcsselwort raise kann eine Exception hervorgerufen werden. Beispiel: raise SyntaxError(\"Hallo Welt\") raise ZeroDivisionError(\"WBS\") ==> Exception Handling kann damit getestet werden","title":"Exception Handling"},{"location":"python/exception_handling/#exception-handling","text":"Errors lassen das Programm abbrechen, darum gibt das Exception Handling um das Programm weiterlaufen zu lassen. (Fehlerbehandlung)","title":"Exception Handling"},{"location":"python/exception_handling/#error-typen","text":"- Exception (Mutterklasse der Fehler) - TypeError - ImportError - ModuleNotFoundError - ZeroDivisionError - SyntaxError","title":"Error-Typen"},{"location":"python/exception_handling/#try-except","text":"Exception wird abgefangen und der Code wird fortgef\u00fchrt Exception wird abgefangen und die Exception wird eine Ebene nach oben \"geworfen\" (Exception Chaining) Fehler wird nicht abgefangen und die Funktion bricht ab beim Funktionsaufruf Try: <Operation> except <Fehler1> <Handling1> except <Fehler2> <Handling2>","title":"Try-Except"},{"location":"python/exception_handling/#finally","text":"kann an Try-Except drangeh\u00e4ngt werden dieser Block wird unabh\u00e4ngig von Fehlern immer ausgef\u00fchrt","title":"finally"},{"location":"python/exception_handling/#assert","text":"Das Schl\u00fcsselwort assert definiert eine Bedingung, die essentiell f\u00fcr das Programm ist. Sie muss True ergeben, sonst f\u00fchrt sie zum Abbruch des Programms. - wird haupts\u00e4chlich im Entwicklungsmodus angewandt, um festzustellen an welchen Stellen ein Fehler auftritt - Wenn alles in Ordnung ist, wird kein Fehler angezeigt und das Terminal bleibt leer - Beispiel: import math assert math.log(1) == 0 # True assert math.sqrt(4) == 1 # False","title":"Assert"},{"location":"python/exception_handling/#traceback","text":"zeigt - Fehlerort - Fehlerstelle und - Fehlertyp","title":"Traceback"},{"location":"python/exception_handling/#fehler-erzeugen-raise","text":"Durch das Schl\u00fcsselwort raise kann eine Exception hervorgerufen werden. Beispiel: raise SyntaxError(\"Hallo Welt\") raise ZeroDivisionError(\"WBS\") ==> Exception Handling kann damit getestet werden","title":"Fehler erzeugen (raise)"},{"location":"python/modules/","text":"Modularisierung Dateien werden in Form von sog. Module organisiert Diese Dateien k\u00f6nnen in das Programm importiert (eingebunden) werden Module liefern Konstanten und Funktionen Globale Module sind Module, die mit der Python-Version geliefert werden k\u00f6nnen \u00fcber pip oder conda installiert werden werden aus als Bibliotheken bezeichnet die zu importierenden Objekte sollten explizit angegeben werden z.B. from math import sin, pi Import vs From ... Import Import beinhaltet \u00f6ffentliche und private Inhalte des Moduls From .. Import beinhaltet keine privaten Inhalte zu importierende private Inhalte k\u00f6nnen explizit angegeben werden Globale Namensr\u00e4ume Beispiele: math, random, csv, mkdocs Befehl f\u00fcr import import math globaler Namensraum kann mit as ma ver\u00e4ndert werden Lokale Module ist eine Kapselung von eigenen Programmdateien reduziert die Anzahl der Codezeilen nicht verf\u00fcgbar f\u00fcr Programmierer an anderen Rechnern Namenskonflikte bei Verwendung von bereits vorhandenen globalen Modulen Funktionen k\u00f6nnen \u00fcberschrieben werden z. B. math.py Pakete mehrere Module k\u00f6nnen in einem Paket gekapselt werden Pakete k\u00f6nnen wiederum auch Pakete beinhalten Paketname ist \u00e4quivalent zum Ordnernamen Zugriff auf enthaltene Module \u00fcber import calc.calculations oder from package import module und ist auch mit as m\u00f6glich","title":"Modularisierung"},{"location":"python/modules/#modularisierung","text":"Dateien werden in Form von sog. Module organisiert Diese Dateien k\u00f6nnen in das Programm importiert (eingebunden) werden Module liefern Konstanten und Funktionen","title":"Modularisierung"},{"location":"python/modules/#globale-module","text":"sind Module, die mit der Python-Version geliefert werden k\u00f6nnen \u00fcber pip oder conda installiert werden werden aus als Bibliotheken bezeichnet die zu importierenden Objekte sollten explizit angegeben werden z.B. from math import sin, pi","title":"Globale Module"},{"location":"python/modules/#import-vs-from-import","text":"Import beinhaltet \u00f6ffentliche und private Inhalte des Moduls From .. Import beinhaltet keine privaten Inhalte zu importierende private Inhalte k\u00f6nnen explizit angegeben werden","title":"Import vs From ... Import"},{"location":"python/modules/#globale-namensraume","text":"Beispiele: math, random, csv, mkdocs Befehl f\u00fcr import import math globaler Namensraum kann mit as ma ver\u00e4ndert werden","title":"Globale Namensr\u00e4ume"},{"location":"python/modules/#lokale-module","text":"ist eine Kapselung von eigenen Programmdateien reduziert die Anzahl der Codezeilen nicht verf\u00fcgbar f\u00fcr Programmierer an anderen Rechnern","title":"Lokale Module"},{"location":"python/modules/#namenskonflikte","text":"bei Verwendung von bereits vorhandenen globalen Modulen Funktionen k\u00f6nnen \u00fcberschrieben werden z. B. math.py","title":"Namenskonflikte"},{"location":"python/modules/#pakete","text":"mehrere Module k\u00f6nnen in einem Paket gekapselt werden Pakete k\u00f6nnen wiederum auch Pakete beinhalten Paketname ist \u00e4quivalent zum Ordnernamen Zugriff auf enthaltene Module \u00fcber import calc.calculations oder from package import module und ist auch mit as m\u00f6glich","title":"Pakete"},{"location":"python/oop/","text":"OOP Wiederverwendbarkeit durch Modularisierung Datenkapselung fasst Daten und Methoden zusammen strenge Datenkapselung: Zugriff auf s\u00e4mtliche Daten nur indirekt Klassen dienen als Baupl\u00e4ne/ Vorlage f\u00fcr Objekte besteht aus Komponenten Attribut (Eigenschaft) Konstruktor Methode Komponenten werden einger\u00fcckt notiert Schl\u00fcsselwort ist `class Klassennamen sollten mit einem Gro\u00dfbuchstaben beginnen (PEP) Objekt (Instanz) das Objekt ist eine Instanz der Klasse verf\u00fcgen \u00fcber spezifischen Zustand/ spezifisches Verhalten Attribut (Eigenschaft) innerhalb von Klassen gibt es zwei Arten von Attributen Klassenattribute Objektattribute (Instanzattribute) Klassenattribute alle Objekte einer Klasse k\u00f6nnen auf diesen Wert zugreifen stehen zu Beginn der Klasse Klassenattribute k\u00f6nnen per .\"\" -Notation angesprochen werden Objektattribute sind von Objekt zu Objekt unterschiedlich werden durch den sog. Konstruktor initialisiert Objektattribute k\u00f6nnen per .\"\" -Notation angesprochen werden Schl\u00fcsselwort Schl\u00fcsselwort f\u00fcr ein Attribut, dass dieses Attribut zu dem Objekt einer Klasse geh\u00f6rt hat spezielle Bedeutung f\u00fcr den Konstruktor muss in allen Methoden (inkl. Konstruktor) einer Klasse als erster Parameter angegeben werden Konstruktor ist die spezielle Methode der Klasse, die angesprochen wird bei der Erstellung eines Objektes \u00fcber den Konstruktor werden die Objektattribute eines Objekts gespeichert Schl\u00fcsselwort ist __init__() Methoden Methoden werden wie Funktionen notiert mit dem Schl\u00fcsselwort def Der erste Parameter bei einer Methode ist self Es kann ein R\u00fcckgabewert angegeben werden Ohne Angabe ist der R\u00fcckgabewert None Der Konstruktor ist eine spezielle Form einer Methode Programmierparadigmen in Python objektorientiert aspektorientiert funktional Programmierans\u00e4tze deklarativ = was ist zu tun? imperativ = wie ist etwas zu tun? => Python","title":"OOP"},{"location":"python/oop/#oop","text":"Wiederverwendbarkeit durch Modularisierung Datenkapselung fasst Daten und Methoden zusammen strenge Datenkapselung: Zugriff auf s\u00e4mtliche Daten nur indirekt","title":"OOP"},{"location":"python/oop/#klassen","text":"dienen als Baupl\u00e4ne/ Vorlage f\u00fcr Objekte besteht aus Komponenten Attribut (Eigenschaft) Konstruktor Methode Komponenten werden einger\u00fcckt notiert Schl\u00fcsselwort ist `class Klassennamen sollten mit einem Gro\u00dfbuchstaben beginnen (PEP)","title":"Klassen"},{"location":"python/oop/#objekt-instanz","text":"das Objekt ist eine Instanz der Klasse verf\u00fcgen \u00fcber spezifischen Zustand/ spezifisches Verhalten","title":"Objekt (Instanz)"},{"location":"python/oop/#attribut-eigenschaft","text":"innerhalb von Klassen gibt es zwei Arten von Attributen Klassenattribute Objektattribute (Instanzattribute)","title":"Attribut (Eigenschaft)"},{"location":"python/oop/#klassenattribute","text":"alle Objekte einer Klasse k\u00f6nnen auf diesen Wert zugreifen stehen zu Beginn der Klasse Klassenattribute k\u00f6nnen per .\"\" -Notation angesprochen werden","title":"Klassenattribute"},{"location":"python/oop/#objektattribute","text":"sind von Objekt zu Objekt unterschiedlich werden durch den sog. Konstruktor initialisiert Objektattribute k\u00f6nnen per .\"\" -Notation angesprochen werden","title":"Objektattribute"},{"location":"python/oop/#schlusselwort","text":"Schl\u00fcsselwort f\u00fcr ein Attribut, dass dieses Attribut zu dem Objekt einer Klasse geh\u00f6rt hat spezielle Bedeutung f\u00fcr den Konstruktor muss in allen Methoden (inkl. Konstruktor) einer Klasse als erster Parameter angegeben werden","title":"Schl\u00fcsselwort "},{"location":"python/oop/#konstruktor","text":"ist die spezielle Methode der Klasse, die angesprochen wird bei der Erstellung eines Objektes \u00fcber den Konstruktor werden die Objektattribute eines Objekts gespeichert Schl\u00fcsselwort ist __init__()","title":"Konstruktor"},{"location":"python/oop/#methoden","text":"Methoden werden wie Funktionen notiert mit dem Schl\u00fcsselwort def Der erste Parameter bei einer Methode ist self Es kann ein R\u00fcckgabewert angegeben werden Ohne Angabe ist der R\u00fcckgabewert None Der Konstruktor ist eine spezielle Form einer Methode","title":"Methoden"},{"location":"python/oop/#programmierparadigmen-in-python","text":"objektorientiert aspektorientiert funktional","title":"Programmierparadigmen in Python"},{"location":"python/oop/#programmieransatze","text":"deklarativ = was ist zu tun? imperativ = wie ist etwas zu tun? => Python","title":"Programmierans\u00e4tze"},{"location":"python/virtual/","text":"Virtuelle Umgebung erstellen Erstellung virtuelle Umgebung python -m venv venv virtualenv venv Start virtuelle Umgebung venv\\Scripts\\activate Stop virtuelle Umgebung venv\\Scripts\\deactivate ODER deactivate Virtuelle Umgebung mit anderer Python-Version virtualenv \u2013p \u201c\\..\\<Pythonversion>\\python.exe\u201c venv","title":"Virtuelle Umgebung erstellen"},{"location":"python/virtual/#virtuelle-umgebung-erstellen","text":"Erstellung virtuelle Umgebung python -m venv venv virtualenv venv Start virtuelle Umgebung venv\\Scripts\\activate Stop virtuelle Umgebung venv\\Scripts\\deactivate ODER deactivate Virtuelle Umgebung mit anderer Python-Version virtualenv \u2013p \u201c\\..\\<Pythonversion>\\python.exe\u201c venv","title":"Virtuelle Umgebung erstellen"},{"location":"python/frameworks/create_django/","text":"Django https://www.codewithharry.com/blogpost/django-cheatsheet/ Start a new Django project Create et access project folder mkdir project_name cd project_name Create Python virtual env python3 -m venv venv Activate virtual env source venv/bin/activate If you want to deactivate virtual env Install django (~= same as 3.1.*) pip install django~=3.1.0 New django project (from project_name folder) django-admin startproject config . Create app (from project_name folder) python manage.py startapp app_name Migration: Django create a database table for each models present in your app using thoses commands: Makemigrations: Create a file under app_name/migrations with the database structure to create python manage.py makemigrations Migrate: Will read the migrations files and create the actual database and tables python manage.py migrate Create superuser for authenficiation/admin panel python manage.py createsuperuser Start server python manage.py runserver => ex. http://127.0.0.1:8000 Requirements Create a requirements file that contain all your projet dependencies pip freeze > requirements.txt Install your project requirements (if a requirements file exist) pip install -r requirements.txt Other commands Django shell (Run projet code direclty) python manage.py shell example of code to run in the shell: from app_name.models import User user1 = User.objects.first() Prepare static folders for production $ python manage.py collectstatic Take all data from app blog and export in json python manage.py dumpdata blog >myapp.json Take all data in json file and import in app data table python manage.py loaddata myapp.json Project config Add app to settings.py INSTALLED_APPS = [ \u2026 , 'app_name' ] App templates folder create folder appfolder/templates/appname Project templates folder: create folder projectname/templates settings.py template config Project templates settings.py: TEMPLATES = [ { \u2026 'DIRS': [BASE_DIR / 'templates', ], \u2026 } Create Static folder: project_name\\static\\ Static folder (settings.py): STATIC_URL = '/static/' STATICFILES_DIRS = [ BASE_DIR / 'static' ] STATIC_ROOT = 'static_root' To use PostgresSQL pip install psycopg2 settings.py DATABASE = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'blog', 'USER': 'admin', 'PASSWORD': '123456', 'HOST': 'localhost', 'PORT': '5432' Create data model: Theses models can be created as database tables with the migrations commands models.py The id fields is automaticly created by Django for each model that why it's not show below from django.db import models class Customer(models.Model) name = models.Charfield('Customer', max_length=120) age = models.IntegerField() note = models.TextField(blank=True, null = True) email = models.EmailField(max_length=255, blank=True, null=True) credit = models.FloatField(blank=True) is_active = models.BooleanField(default=True) created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) # Select Field (return value, display value) TYPE_CHOICES = ( ('Customer', 'Customer'), ('Supplier', 'Supplier'), ('Student', 'Student'), ) type = models.CharField(choices=TYPE_CHOICES) Model string representation class Customer(models.Model): name = models.Charfield('Customer', max_length=120) age = models.IntegerField() def __str__(self): return self.name Relationship between models One-to-Many: (use double quotes if the entity is not yet declare) ex. \"Supplier\" supplier = models.ForeignKey(Supplier, blank=True, null=True, on_delete=models.CASCADE) on_delete can be set to models.CASCADE, models.ST_DEFAULT or models.SET_NULL Many-to-Many: tags = models.ManyToManyField(Tag, blank=True) One to One User = models.OneToOneField(User, on_delete=models.CASCADE) Overwrite save method def save(self, ( args, *kwargs): if not self.slug: self.slug = slugify(self.title) super().save(*args, **kwargs) Admin panel: Every Django projects come with an Admin Panel that can be open at /admin url (ex: localhost:8000/admin) To display the model in the Admin panel register the model in the app_name/admin.py file from .models import Blog admin.site.register(Blog) Customize Admin Panel For each models you can specify the fields you want to use Custom model Admin (admin.py): class BlogAdmin(admin.ModelAdmin) fields = (\"title\", \"description\") # Fields to use for add/edit/show page list_display = (\"title\", \"description\") # fields to display in search page list_display_links = (\"title\") # fields that will be a link in search page ordering(\"date_created\",) # Ordering allowed in the search page search_fields(\"title\", \"description\") # Search fields allowed in the search page Register app admin.site.register(Blog, BlogAdmin) Routing: Django routing info is store in project_folder/urls.py file from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), # pre-created admin urls routes path('', include('app_name.urls')) # include your app urls ] the 'include()' method allow to link another urls.py file created in your app folder (app_name/urls.py) from django.urls import path from . import views url patterns = [ path('posts', views.index, name='posts.index'), path('posts/create/', views.create, name='posts.create', path('posts/ /', views.show, name='posts.show'), path('posts/ /edit/', views.edit, name='posts.edit'), path('posts/ /delete/', views.delete, name='posts.delete'), ] Static route from django.conf import settings from django.conf.urls.static import static urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) Function Based Views views.py from django.shortcuts import render, redirect from .models import Post from .forms import PostForm def index(request): # Get all Posts posts = Post.objects.all() # Render app template with context return render(request, 'appfolder/index.html', {'posts': posts}) def show(request, id): post = Post.objects.get(id=id) return render(request, 'appfolder/show.html', {'post': post}) def create(request): form = PostForm(request.POST or None) if form.is_valid(): # optionally we can access form data with form.cleaned_data['first_name'] post = form.save(commit=False) post.user = request.user post.save() return redirect('/posts') return render(request, 'appfolder/create.html', {'form': form) def edit(request, id): post = Post.objects.get(id=id) form = PostForm(request.POST or None, instance=post) if form.is_valid(): form.save() return redirect('/posts') return render(request, 'appfolder/edit.html', {'form': form) def delete(request, id): post = Post.objects.get(id=id) post.delete() return redirect('/posts') Class based Views from django.views.generic import TemplateView, ListView, DetailView, CreateView, UpdateView, DeleteView class LandingPageView(TemplateView): template_name = 'landing.html' # Optional: Change context data dict def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = 'Landing Page' return context class PostsListView(ListView): queryset = Post.objects.all() # Optional # context_object_name = \"posts\" (default: post_list) # template_name = 'posts.html' (default: posts/post_list.html) class PostsDetailView(DetailView): model = Post # object var in template # Optional # template_name = 'post.html' (default: posts/post_detail.html) class PostsCreateView(CreateView): form_class = PostForm template_name = 'posts/post_create.html' # no default value def get_success_url(self): return reverse('posts-list') # Optional: Overwrite form data (before save) def form_valid(self, form): if self.request.user.is_authenticated: from.instance.author = self.request.user return super().form_valid(form) class PostsUpdateView(UpdateView): model = Post form_class = PostForm template_name = 'posts/post_update.html' def get_success_url(self): return reverse('post-list') # Optional: Change context data dict def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['submit_text'] = 'Update' return context class PostsDeleteView(DeleteView): model = Post template_name = 'posts/post_delete.html' success_url = reverse_lazy('posts-list') Urls.py route declaration path(' /update/', PostsUpdateView.as_view(), name='post-update') Django Template: Templates are store in project_folder/templates or in your app_folder/templates/app_name/*.html {% extends 'base.html' %} {% block content %} {% include 'header.html' %} {% if user.username = 'Mike' %} Hello Admin {% else %} Hello User {% for product in products %} The product name is {{ product }} {% endfor %} {{ var_name }} Template variables formating {{ title | lower }} {{ blog.post | truncatwords:50 }} {{ order.date | date:\"D M Y\" }} {{ list_items | slice:\":3\" }} {{ total | default:\"nil\" }} Current path (ex. posts/1/show) {{ request.path }} URL by name with param {% url 'posts.delete' id=post.id %} Use static in template: {% load static %} {% static 'css/main.css' %} Model Managers and Querysets: Model manager allow model database reads and writes # One line create and save Article.objects.create(name='Item 1', price=19.95) # Read all Article.objects.all() # Create user = User.objects.first() article = Article(user=user, name='Item 1', price=19.95) # Save article.save() # Read one Article.objects.get(id=1) # Select Related (to avoid n+1 query) posts = Post.objects.select_related('user', 'category').all() # Read or render a 404 not found page from django.shortcuts import get_object_or_404 article = get_object_or_404(Article, id=512) # Filter Article.objects.filter(model='dyson', name__icontains='dyson') # __icontains Article.objects.filter(year__gt=2016) # __gt = greater than Article.objects.filter(year__lt=2001) # __lt = less than # Filter on relationship sub model field Article.objects.get(user__username='mike') # Ordering Article.objects.order_by('name') # ascending Article.objects.order_by('-name') # descending # Slicing return first Article.objects.all().order_by('name')[0] # Slicing return last Article.objects.all().order_by('-name')[0] # Slicing limit/offset Article.objects.all().order_by('name')[1..10] # Updating article = Article.objects.first() article.name = 'new name' article.save() # One line update Article.objects.filter(id=4).update(name='new name') # Deleting article = Article.objects.first() article.delete() # One line delete article.objects.get(id=1).delete() # Delete all Article.objects.all().delete() # Set ForeignKey field value model1 = Model(name='dyson') article.model = model1 # Get ForeignKey value article1.model.name model1.article_set.all() # Add Many-to-Many article1.tags.add(tag1) article1.tags.all() tag1.articles_set.all() Form (forms.py) from django import forms class ArticleForm(forms.Form): name = forms.Charfield(max_length=100) description = forms.Charfield(blank=True, null = True) # Model Form from django.forms import ModelForm from .models import Article class ArticleForm(ModelForm): class Meta: model = Article fields = ['name', 'description', 'price'] # Use '__all__' for all fields # Render form in template {% csrf_token %} {{ form }} Submit # Bootstrap (pip install django-crispy-forms + installed_apps: 'crispy_forms') {% load crispy_forms_tags %} {{ form|crispy }} {{ form.email|as_crispy_field }} # crispy-tailwind pip install crispy-tailwind # settings.py CRISPY_ALLOWED_TEMPLATE_PACKS = 'tailwind' CRISPY_TEMPLATE_PACK = 'tailwind' # template usage {% load tailwind_filters %} {{ form|crispy}} Form validation # forms.py from django.core.exceptions import ValidationError # field validation def clean_first_name(self): data = self.cleaned_data['first_name'] if data = 'Mike': raise ValidationError('Your name must not be Mike') return data # form validation def clean(self): first_name = self.cleaned_data['first_name'] last_name = self.cleaned_data['last_name'] if first_name + last_name = 'MikeTaylor': raise ValidationError('Your name must not be Mike Taylor') Flash messages messages.success(request, 'Login successful') messages.error(request, 'Login error') # Message tags # debug, info, success, warning and error # Display flash in template {% if messages %} {% for message in messages %} {% message %} {% message.tags %} User model (pre-created) # Get a reference to Django pre-created User model from django.contrib.auth import get_user_model User = get_user_model() # Or if you want to custom user model from django.contrib.auth.models import AbstractUser class User(AbstractUser): # add custom fields and methods # To make Django use that model go to settings.py and add: AUTH_USER_MODEL = 'app_name.User' Authentification: LoginView # LoginView is already pre-created by Django from django.contrib.auth.views import LoginView # Add a url to reach that view path('login/', LoginView.as_view(), name='login') # By default the LoginView will try to open a template name 'registration/login.html' and send a login form with it. # Create a template under registration/login.html {% extends \"base.html\" %} {% block content %} {% csrf_token %} {{ form }} Login {% endblock content %} # When user click the Login button, the LoginView will try to authenticate the user with the form username ans password. # If successful il will then login the user and redirect to LOGIN_REDIRECT_URL specified in your settings.py Authentification: LogoutView # LogoutView is already pre-created by Django from django.contrib.auth.views import LogoutView # Add a url to reach that view path('logout/', LoginView.as_view(), name='logout') # Include a link in a template href=\"{% url 'logout' %}\">Logout # After link is execute, the user will be logout and redirect to LOGOUT_REDIRECT_URL specified in your settings.py Authentification: SignupView # Create a SignupView (that view is not created by default) # import sinupview form pre-created by Django from django.contrib.auth.forms import UserCreationForm from django.views.generic import CreateView class SignupView(CreateView): template_name = 'registration/signup.html' form_class = UserCreationForm def get_success_url(self): return reverse(\"login\") # Create template: registration/signup.html {% extends \"base.html\" %} {% block content %} {% csrf_token %} {{ form }} Signup {% endblock content %} # Add a url to reach that view from posts.views import SignupView path('signup/', SignupView.as_view(), name='signup') # Optional: Customize the UserCreationForm # (forms.py) from django.contrib.auth import get_user_model from django.contrib.auth.forms import UserCreationForm User = get_user_model() class CustomUserCreationForm(UserCreattionForm): class Meta: model = User fields = ['username'] fields_classes = {'username': UsernameField} Optional pre-created authentification routes # urls.py urlpatterns += path('', include('django.contrib.auth.urls')) # /login, /lougout, /signup, etc. Template Authentification helpers # Authentication links Login Signup Logout # Check if user login {% if request.user.is_authenticated %} Logged in as: {{ request.user.username }} {% endif %} Authorization: LoginRequiredMixin and login_required from django.contrib.auth.mixins import LoginRequiredMixin # Restrict views to auth user only (views.py) class PostsCreateView(LoginRequiredMixin, generic.CreateView): ... ... from django.contrib.auth.decorators import login_required @login_required(login_url='/login') def search_page(request): ... ... Manual Authentification, Login and Logout from django.contrib.auth import authenticate, login def login_page(request): if request.method == \"POST\": username = request.POST.get(\"username\") password = request.POST.get(\"password\") user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(\"index\") return render(request, \"registration/login.html\", {}) def logout_page(request): logout(request) return redirect(\"index\") User Change password # set_password will hash the password user.set_password('raw password') Send Email # settings.py EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\" # Send email function from django.core.email import send_mail send_mail( subject = \"A new post has been created\", messsage = \"Go to the web site to see the detail\", from_email = \"test@test.com\", recipient_list = [\"test2@text.com\"] ) Signals # models.py from django.db.models.signals import post_save, pre_save def post_user_created_signal(sender, instance, created, **kwargs): if created: UserProfile.objects.create(user=instance) # Launch the post_user_create_singal method if User model is save post_save.connect(post_user_created_signal, sender=User) Seed from .models import Product, Category from django.shortcuts import HttpResponse from faker import Faker def seed(request): Product.objects.all().delete() Category.objects.all().delete() category = Category() category.name = \"Sports\" category.save() category = Category() category.name = \"Home\" category.save() fake = Faker() for _ in range(100): product = Product() product.name = fake.unique.word() product.short_description = fake.sentence() product.main_picture = fake.image_url() product.price = fake.random_digit() * 10 product.category = Category.objects.order_by('?').first() product.save() return HttpResponse('Seeded') .env key/value file $ pip install django-dotenv add code to manage.py file import dotenv def main(): \"\"\"Run administrative tasks.\"\"\" dotenv.read_dotenv() #add this line ... ... Create a file name '.env' in the root folder of your project SECRET_KEY = 'your secret key' ALLOWED_HOST=127.0.0.1 In settings.py change security related settings to point to the .env file import os SECRET_KEY = os.environ.get('SECRET_KEY') ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS') # Create et access project folder > mkdir project_name > cd project_name # Create Python virtual env > python3 -m venv venv # Activate virtual env > source venv/bin/activate # If you want to deactivate virtual env > deactivate # Install django (~= same as 3.1.*) > pip install django~=3.1.0 # New django project (from project_name folder) > django-admin startproject config . # Create app (from project_name folder) > python manage.py startapp app_name *[scalar-type]: int, float, string, bool *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium","title":"Django"},{"location":"python/frameworks/create_django/#django","text":"https://www.codewithharry.com/blogpost/django-cheatsheet/ Start a new Django project","title":"Django"},{"location":"python/frameworks/create_django/#create-et-access-project-folder","text":"mkdir project_name cd project_name","title":"Create et access project folder"},{"location":"python/frameworks/create_django/#create-python-virtual-env","text":"python3 -m venv venv","title":"Create Python virtual env"},{"location":"python/frameworks/create_django/#activate-virtual-env","text":"source venv/bin/activate","title":"Activate virtual env"},{"location":"python/frameworks/create_django/#if-you-want-to-deactivate-virtual-env","text":"","title":"If you want to deactivate virtual env"},{"location":"python/frameworks/create_django/#install-django-same-as-31","text":"pip install django~=3.1.0","title":"Install django (~= same as 3.1.*)"},{"location":"python/frameworks/create_django/#new-django-project-from-project_name-folder","text":"django-admin startproject config .","title":"New django project (from project_name folder)"},{"location":"python/frameworks/create_django/#create-app-from-project_name-folder","text":"python manage.py startapp app_name Migration: Django create a database table for each models present in your app using thoses commands: Makemigrations: Create a file under app_name/migrations with the database structure to create python manage.py makemigrations Migrate: Will read the migrations files and create the actual database and tables python manage.py migrate Create superuser for authenficiation/admin panel python manage.py createsuperuser Start server python manage.py runserver => ex. http://127.0.0.1:8000 Requirements","title":"Create app (from project_name folder)"},{"location":"python/frameworks/create_django/#create-a-requirements-file-that-contain-all-your-projet-dependencies","text":"pip freeze > requirements.txt","title":"Create a requirements file that contain all your projet dependencies"},{"location":"python/frameworks/create_django/#install-your-project-requirements-if-a-requirements-file-exist","text":"pip install -r requirements.txt Other commands","title":"Install your project requirements (if a requirements file exist)"},{"location":"python/frameworks/create_django/#django-shell-run-projet-code-direclty","text":"python manage.py shell","title":"Django shell (Run projet code direclty)"},{"location":"python/frameworks/create_django/#example-of-code-to-run-in-the-shell","text":"from app_name.models import User user1 = User.objects.first()","title":"example of code to run in the shell:"},{"location":"python/frameworks/create_django/#prepare-static-folders-for-production","text":"$ python manage.py collectstatic","title":"Prepare static folders for production"},{"location":"python/frameworks/create_django/#take-all-data-from-app-blog-and-export-in-json","text":"python manage.py dumpdata blog >myapp.json","title":"Take all data from app blog and export in json"},{"location":"python/frameworks/create_django/#take-all-data-in-json-file-and-import-in-app-data-table","text":"python manage.py loaddata myapp.json Project config","title":"Take all data in json file and import in app data table"},{"location":"python/frameworks/create_django/#add-app-to-settingspy","text":"INSTALLED_APPS = [ \u2026 , 'app_name' ]","title":"Add app to settings.py"},{"location":"python/frameworks/create_django/#app-templates-folder","text":"create folder appfolder/templates/appname","title":"App templates folder"},{"location":"python/frameworks/create_django/#project-templates-folder","text":"create folder projectname/templates","title":"Project templates folder:"},{"location":"python/frameworks/create_django/#settingspy-template-config","text":"Project templates settings.py: TEMPLATES = [ { \u2026 'DIRS': [BASE_DIR / 'templates', ], \u2026 }","title":"settings.py template config"},{"location":"python/frameworks/create_django/#create-static-folder","text":"project_name\\static\\","title":"Create Static folder:"},{"location":"python/frameworks/create_django/#static-folder-settingspy","text":"STATIC_URL = '/static/' STATICFILES_DIRS = [ BASE_DIR / 'static' ] STATIC_ROOT = 'static_root'","title":"Static folder (settings.py):"},{"location":"python/frameworks/create_django/#to-use-postgressql","text":"","title":"To use PostgresSQL"},{"location":"python/frameworks/create_django/#pip-install-psycopg2","text":"","title":"pip install psycopg2"},{"location":"python/frameworks/create_django/#settingspy","text":"DATABASE = { 'default': { 'ENGINE': 'django.db.backends.postgresql', 'NAME': 'blog', 'USER': 'admin', 'PASSWORD': '123456', 'HOST': 'localhost', 'PORT': '5432' Create data model: Theses models can be created as database tables with the migrations commands","title":"settings.py"},{"location":"python/frameworks/create_django/#modelspy","text":"","title":"models.py"},{"location":"python/frameworks/create_django/#the-id-fields-is-automaticly-created-by-django-for-each-model-that-why-its-not-show-below","text":"from django.db import models class Customer(models.Model) name = models.Charfield('Customer', max_length=120) age = models.IntegerField() note = models.TextField(blank=True, null = True) email = models.EmailField(max_length=255, blank=True, null=True) credit = models.FloatField(blank=True) is_active = models.BooleanField(default=True) created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) # Select Field (return value, display value) TYPE_CHOICES = ( ('Customer', 'Customer'), ('Supplier', 'Supplier'), ('Student', 'Student'), ) type = models.CharField(choices=TYPE_CHOICES) Model string representation class Customer(models.Model): name = models.Charfield('Customer', max_length=120) age = models.IntegerField() def __str__(self): return self.name Relationship between models","title":"The id fields is automaticly created by Django for each model that why it's not show below"},{"location":"python/frameworks/create_django/#one-to-many-use-double-quotes-if-the-entity-is-not-yet-declare-ex-supplier","text":"supplier = models.ForeignKey(Supplier, blank=True, null=True, on_delete=models.CASCADE)","title":"One-to-Many: (use double quotes if the entity is not yet declare) ex. \"Supplier\""},{"location":"python/frameworks/create_django/#on_delete-can-be-set-to-modelscascade-modelsst_default-or-modelsset_null","text":"","title":"on_delete can be set to models.CASCADE, models.ST_DEFAULT or models.SET_NULL"},{"location":"python/frameworks/create_django/#many-to-many","text":"tags = models.ManyToManyField(Tag, blank=True)","title":"Many-to-Many:"},{"location":"python/frameworks/create_django/#one-to-one","text":"User = models.OneToOneField(User, on_delete=models.CASCADE)","title":"One to One"},{"location":"python/frameworks/create_django/#overwrite-save-method","text":"def save(self, ( args, *kwargs): if not self.slug: self.slug = slugify(self.title) super().save(*args, **kwargs) Admin panel: Every Django projects come with an Admin Panel that can be open at /admin url (ex: localhost:8000/admin) To display the model in the Admin panel register the model in the app_name/admin.py file from .models import Blog admin.site.register(Blog) Customize Admin Panel For each models you can specify the fields you want to use","title":"Overwrite save method"},{"location":"python/frameworks/create_django/#custom-model-admin-adminpy","text":"class BlogAdmin(admin.ModelAdmin) fields = (\"title\", \"description\") # Fields to use for add/edit/show page list_display = (\"title\", \"description\") # fields to display in search page list_display_links = (\"title\") # fields that will be a link in search page ordering(\"date_created\",) # Ordering allowed in the search page search_fields(\"title\", \"description\") # Search fields allowed in the search page","title":"Custom model Admin (admin.py):"},{"location":"python/frameworks/create_django/#register-app","text":"admin.site.register(Blog, BlogAdmin) Routing: Django routing info is store in project_folder/urls.py file from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), # pre-created admin urls routes path('', include('app_name.urls')) # include your app urls ] the 'include()' method allow to link another urls.py file created in your app folder (app_name/urls.py) from django.urls import path from . import views url patterns = [ path('posts', views.index, name='posts.index'), path('posts/create/', views.create, name='posts.create', path('posts/ /', views.show, name='posts.show'), path('posts/ /edit/', views.edit, name='posts.edit'), path('posts/ /delete/', views.delete, name='posts.delete'), ] Static route from django.conf import settings from django.conf.urls.static import static urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) Function Based Views","title":"Register app"},{"location":"python/frameworks/create_django/#viewspy","text":"from django.shortcuts import render, redirect from .models import Post from .forms import PostForm def index(request): # Get all Posts posts = Post.objects.all() # Render app template with context return render(request, 'appfolder/index.html', {'posts': posts}) def show(request, id): post = Post.objects.get(id=id) return render(request, 'appfolder/show.html', {'post': post}) def create(request): form = PostForm(request.POST or None) if form.is_valid(): # optionally we can access form data with form.cleaned_data['first_name'] post = form.save(commit=False) post.user = request.user post.save() return redirect('/posts') return render(request, 'appfolder/create.html', {'form': form) def edit(request, id): post = Post.objects.get(id=id) form = PostForm(request.POST or None, instance=post) if form.is_valid(): form.save() return redirect('/posts') return render(request, 'appfolder/edit.html', {'form': form) def delete(request, id): post = Post.objects.get(id=id) post.delete() return redirect('/posts') Class based Views from django.views.generic import TemplateView, ListView, DetailView, CreateView, UpdateView, DeleteView class LandingPageView(TemplateView): template_name = 'landing.html' # Optional: Change context data dict def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = 'Landing Page' return context class PostsListView(ListView): queryset = Post.objects.all() # Optional # context_object_name = \"posts\" (default: post_list) # template_name = 'posts.html' (default: posts/post_list.html) class PostsDetailView(DetailView): model = Post # object var in template # Optional # template_name = 'post.html' (default: posts/post_detail.html) class PostsCreateView(CreateView): form_class = PostForm template_name = 'posts/post_create.html' # no default value def get_success_url(self): return reverse('posts-list') # Optional: Overwrite form data (before save) def form_valid(self, form): if self.request.user.is_authenticated: from.instance.author = self.request.user return super().form_valid(form) class PostsUpdateView(UpdateView): model = Post form_class = PostForm template_name = 'posts/post_update.html' def get_success_url(self): return reverse('post-list') # Optional: Change context data dict def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['submit_text'] = 'Update' return context class PostsDeleteView(DeleteView): model = Post template_name = 'posts/post_delete.html' success_url = reverse_lazy('posts-list')","title":"views.py"},{"location":"python/frameworks/create_django/#urlspy-route-declaration","text":"path(' /update/', PostsUpdateView.as_view(), name='post-update') Django Template: Templates are store in project_folder/templates or in your app_folder/templates/app_name/*.html {% extends 'base.html' %} {% block content %} {% include 'header.html' %} {% if user.username = 'Mike' %} Hello Admin {% else %} Hello User {% for product in products %} The product name is {{ product }} {% endfor %} {{ var_name }} Template variables formating {{ title | lower }} {{ blog.post | truncatwords:50 }} {{ order.date | date:\"D M Y\" }} {{ list_items | slice:\":3\" }} {{ total | default:\"nil\" }} Current path (ex. posts/1/show) {{ request.path }} URL by name with param {% url 'posts.delete' id=post.id %} Use static in template: {% load static %} {% static 'css/main.css' %} Model Managers and Querysets: Model manager allow model database reads and writes # One line create and save Article.objects.create(name='Item 1', price=19.95) # Read all Article.objects.all() # Create user = User.objects.first() article = Article(user=user, name='Item 1', price=19.95) # Save article.save() # Read one Article.objects.get(id=1) # Select Related (to avoid n+1 query) posts = Post.objects.select_related('user', 'category').all() # Read or render a 404 not found page from django.shortcuts import get_object_or_404 article = get_object_or_404(Article, id=512) # Filter Article.objects.filter(model='dyson', name__icontains='dyson') # __icontains Article.objects.filter(year__gt=2016) # __gt = greater than Article.objects.filter(year__lt=2001) # __lt = less than # Filter on relationship sub model field Article.objects.get(user__username='mike') # Ordering Article.objects.order_by('name') # ascending Article.objects.order_by('-name') # descending # Slicing return first Article.objects.all().order_by('name')[0] # Slicing return last Article.objects.all().order_by('-name')[0] # Slicing limit/offset Article.objects.all().order_by('name')[1..10] # Updating article = Article.objects.first() article.name = 'new name' article.save() # One line update Article.objects.filter(id=4).update(name='new name') # Deleting article = Article.objects.first() article.delete() # One line delete article.objects.get(id=1).delete() # Delete all Article.objects.all().delete() # Set ForeignKey field value model1 = Model(name='dyson') article.model = model1 # Get ForeignKey value article1.model.name model1.article_set.all() # Add Many-to-Many article1.tags.add(tag1) article1.tags.all() tag1.articles_set.all() Form (forms.py) from django import forms class ArticleForm(forms.Form): name = forms.Charfield(max_length=100) description = forms.Charfield(blank=True, null = True) # Model Form from django.forms import ModelForm from .models import Article class ArticleForm(ModelForm): class Meta: model = Article fields = ['name', 'description', 'price'] # Use '__all__' for all fields # Render form in template {% csrf_token %} {{ form }} Submit # Bootstrap (pip install django-crispy-forms + installed_apps: 'crispy_forms') {% load crispy_forms_tags %} {{ form|crispy }} {{ form.email|as_crispy_field }} # crispy-tailwind pip install crispy-tailwind # settings.py CRISPY_ALLOWED_TEMPLATE_PACKS = 'tailwind' CRISPY_TEMPLATE_PACK = 'tailwind' # template usage {% load tailwind_filters %} {{ form|crispy}} Form validation # forms.py from django.core.exceptions import ValidationError # field validation def clean_first_name(self): data = self.cleaned_data['first_name'] if data = 'Mike': raise ValidationError('Your name must not be Mike') return data # form validation def clean(self): first_name = self.cleaned_data['first_name'] last_name = self.cleaned_data['last_name'] if first_name + last_name = 'MikeTaylor': raise ValidationError('Your name must not be Mike Taylor') Flash messages messages.success(request, 'Login successful') messages.error(request, 'Login error') # Message tags # debug, info, success, warning and error # Display flash in template {% if messages %} {% for message in messages %} {% message %} {% message.tags %} User model (pre-created) # Get a reference to Django pre-created User model from django.contrib.auth import get_user_model User = get_user_model() # Or if you want to custom user model from django.contrib.auth.models import AbstractUser class User(AbstractUser): # add custom fields and methods # To make Django use that model go to settings.py and add: AUTH_USER_MODEL = 'app_name.User' Authentification: LoginView # LoginView is already pre-created by Django from django.contrib.auth.views import LoginView # Add a url to reach that view path('login/', LoginView.as_view(), name='login') # By default the LoginView will try to open a template name 'registration/login.html' and send a login form with it. # Create a template under registration/login.html {% extends \"base.html\" %} {% block content %} {% csrf_token %} {{ form }} Login {% endblock content %} # When user click the Login button, the LoginView will try to authenticate the user with the form username ans password. # If successful il will then login the user and redirect to LOGIN_REDIRECT_URL specified in your settings.py Authentification: LogoutView # LogoutView is already pre-created by Django from django.contrib.auth.views import LogoutView # Add a url to reach that view path('logout/', LoginView.as_view(), name='logout') # Include a link in a template href=\"{% url 'logout' %}\">Logout # After link is execute, the user will be logout and redirect to LOGOUT_REDIRECT_URL specified in your settings.py Authentification: SignupView # Create a SignupView (that view is not created by default) # import sinupview form pre-created by Django from django.contrib.auth.forms import UserCreationForm from django.views.generic import CreateView class SignupView(CreateView): template_name = 'registration/signup.html' form_class = UserCreationForm def get_success_url(self): return reverse(\"login\") # Create template: registration/signup.html {% extends \"base.html\" %} {% block content %} {% csrf_token %} {{ form }} Signup {% endblock content %} # Add a url to reach that view from posts.views import SignupView path('signup/', SignupView.as_view(), name='signup') # Optional: Customize the UserCreationForm # (forms.py) from django.contrib.auth import get_user_model from django.contrib.auth.forms import UserCreationForm User = get_user_model() class CustomUserCreationForm(UserCreattionForm): class Meta: model = User fields = ['username'] fields_classes = {'username': UsernameField} Optional pre-created authentification routes # urls.py urlpatterns += path('', include('django.contrib.auth.urls')) # /login, /lougout, /signup, etc. Template Authentification helpers # Authentication links Login Signup Logout # Check if user login {% if request.user.is_authenticated %} Logged in as: {{ request.user.username }} {% endif %} Authorization: LoginRequiredMixin and login_required from django.contrib.auth.mixins import LoginRequiredMixin # Restrict views to auth user only (views.py) class PostsCreateView(LoginRequiredMixin, generic.CreateView): ... ... from django.contrib.auth.decorators import login_required @login_required(login_url='/login') def search_page(request): ... ... Manual Authentification, Login and Logout from django.contrib.auth import authenticate, login def login_page(request): if request.method == \"POST\": username = request.POST.get(\"username\") password = request.POST.get(\"password\") user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(\"index\") return render(request, \"registration/login.html\", {}) def logout_page(request): logout(request) return redirect(\"index\") User Change password # set_password will hash the password user.set_password('raw password') Send Email # settings.py EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\" # Send email function from django.core.email import send_mail send_mail( subject = \"A new post has been created\", messsage = \"Go to the web site to see the detail\", from_email = \"test@test.com\", recipient_list = [\"test2@text.com\"] ) Signals # models.py from django.db.models.signals import post_save, pre_save def post_user_created_signal(sender, instance, created, **kwargs): if created: UserProfile.objects.create(user=instance) # Launch the post_user_create_singal method if User model is save post_save.connect(post_user_created_signal, sender=User) Seed from .models import Product, Category from django.shortcuts import HttpResponse from faker import Faker def seed(request): Product.objects.all().delete() Category.objects.all().delete() category = Category() category.name = \"Sports\" category.save() category = Category() category.name = \"Home\" category.save() fake = Faker() for _ in range(100): product = Product() product.name = fake.unique.word() product.short_description = fake.sentence() product.main_picture = fake.image_url() product.price = fake.random_digit() * 10 product.category = Category.objects.order_by('?').first() product.save() return HttpResponse('Seeded') .env key/value file $ pip install django-dotenv add code to manage.py file import dotenv def main(): \"\"\"Run administrative tasks.\"\"\" dotenv.read_dotenv() #add this line ... ... Create a file name '.env' in the root folder of your project SECRET_KEY = 'your secret key' ALLOWED_HOST=127.0.0.1 In settings.py change security related settings to point to the .env file import os SECRET_KEY = os.environ.get('SECRET_KEY') ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS') # Create et access project folder > mkdir project_name > cd project_name # Create Python virtual env > python3 -m venv venv # Activate virtual env > source venv/bin/activate # If you want to deactivate virtual env > deactivate # Install django (~= same as 3.1.*) > pip install django~=3.1.0 # New django project (from project_name folder) > django-admin startproject config . # Create app (from project_name folder) > python manage.py startapp app_name *[scalar-type]: int, float, string, bool *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium","title":"Urls.py route declaration"},{"location":"python/frameworks/django/","text":"Django Basics virtuelle Umgebung erstellen python3 -m venv venv virtuelle Umgebung starten Scripts\\activate virtuelle Umgebung beenden deactivate Django installieren pip install django Server starten python manage.py runserver Port \u00e4ndern python manage.py runserver Port 80 Project anlegen django-admin startproject \"name\" Server starten Apps erstellen App erzeugen django-admin startapp \"name\" oder python manage.py startapp app_name views.py Im Ordner der App das Dokument 'views.py' \u00f6ffnen und hinzuf\u00fcgen: from django.http import HttpResponse Funktion anlegen: def index(request): return HttpResponse urls.py Neue Datei anlegen \"urls.py\" from django.urls import path from . import views urlpatterns = [ path('', views.index, name='index'), ] im \u00fcbergeordneten Ordner des Project ebenfalls in der \"urls.py\" angeben: from django.urls import path,**include** und unter urlpatterns path('app1/', include('app1.urls'))","title":"Django"},{"location":"python/frameworks/django/#django","text":"","title":"Django"},{"location":"python/frameworks/django/#basics","text":"virtuelle Umgebung erstellen python3 -m venv venv virtuelle Umgebung starten Scripts\\activate virtuelle Umgebung beenden deactivate Django installieren pip install django Server starten python manage.py runserver Port \u00e4ndern python manage.py runserver Port 80","title":"Basics"},{"location":"python/frameworks/django/#project-anlegen","text":"django-admin startproject \"name\" Server starten","title":"Project anlegen"},{"location":"python/frameworks/django/#apps-erstellen","text":"App erzeugen django-admin startapp \"name\" oder python manage.py startapp app_name views.py Im Ordner der App das Dokument 'views.py' \u00f6ffnen und hinzuf\u00fcgen: from django.http import HttpResponse Funktion anlegen: def index(request): return HttpResponse urls.py Neue Datei anlegen \"urls.py\" from django.urls import path from . import views urlpatterns = [ path('', views.index, name='index'), ] im \u00fcbergeordneten Ordner des Project ebenfalls in der \"urls.py\" angeben: from django.urls import path,**include** und unter urlpatterns path('app1/', include('app1.urls'))","title":"Apps erstellen"},{"location":"python/functions/functions/","text":"Funktionen Funktionen k\u00f6nnen selber aus mehreren Bestandteilen bestehen: - Variablen - Datenstrukturen - If-Else-Struktur - Schleifenstrukturen - Eingaben - Dateiverarbeitung - Funktionen Parameter Reihenfolge Positionsparameter n-Parameter(Tupel) Schl\u00fcsselwertparameter n-Parameter(Dictionary) Parameterdefinitionen Positionsparameter Die Parameter bei den Funktionen in der bisherigen Notation sind sog. Positionsparameter Die \u00dcbertragung von Argumenten in der Funktionsschnittstelle ist durch die Positionsparameter in einer definierten Reihenfolge Beispiel: math.pow(x, y) x ist der erste Positionsparameter (Basis der Potenz) y ist der zweite Positionsparameter (Exponent der Potenz) Bei eigenen Funktionen sind die Parameter ohne weitere Angaben Positionsparameter Positionsparameter sind obligatorisch f\u00fcr den Funktionsaufruf optionale Parameter Optionale Parameter werden in der Funktionsdefinition als Parameter definiert, die optional sind Bei dem Funktionsaufruf m\u00fcssen sie nicht (!) mit angegeben werden Sie werden mit 0 oder mit \u201c\u201c oder mit None als Platzhalter angegeben Beispiel: def funktion(x, y=0, z=None) Schl\u00fcsselwertparameter Schl\u00fcsselwertparameter treten bei dem Funktionsaufruf auf Bei dem Funktionsaufruf werden die Parameternamen der Funktion explizit aufgerufen Die Reihenfolge der Schl\u00fcsselwertparameter untereinander ist hierbei irrelevant Beispiel: ergebnis = funktion(x=1,y=2) beliebige Parameteranzahl (Tupel) In Python ist es m\u00f6glich eine beliebige Parameteranzahl zu programmieren Die Datenstruktur in der beliebigen Parameteranzahl \u00fcber * gespeichert wird ist das Tupel Diese Parameteranzahl kann 0 bis n betragen Beispiel: def funktion(*parameter) beliebige Parameteranzahl (Dictionary) Die Datenstruktur in der beliebigen Parameteranzahl \u00fcber ** gespeichert wird ist das Dictionary Diese Parameteranzahl kann 0 bis n betragen Beispiel: funktion(**parameter) reine Schl\u00fcsselwertparameter Die sog. reinen Schl\u00fcsselwertparameter treten in Kombination mit dem Parametertyp der beliebig viele Werte in einem Tupel speichert Jeder Parameter, der nach diesem Parametertyp gespeichert wird ist ein sog. Schl\u00fcsselwertparameter Beispiel: def funktion(*a, rein_schl1, rein_schl2) Bei dem Funktionsaufruf m\u00fcssen sie wie normale Schl\u00fcsselwertargumente aufgerufen werden Beispiel funktion(2, 3, 4, rein_schl1 = 10, rein_schl2 = 6) Namensr\u00e4ume Es gibt - globale Variablen/ Funktionen und - lokale Variablen/ Funktionen Die Namen der Variablen k\u00f6nnen identisch sein, da sie verschiedenen Namensr\u00e4umen zugeordnet sind Lokale Referenz sobald eine Funktion und ihre lokale Variable die globalen Variable \u00fcberschreiben will, entsteht dadurch eine sog. Lokale Referenz Diese lokale Referenz kann die globale Variable nicht \u00fcberschreiben global generiert einen Schreibzugriff auf eine globale Variable s nonlocal kann auf lokale Variablen eines h\u00f6heren Geltungsbereich zugreifen Anonyme Funktion besitzen keinen Funktionsnamen werden durch das Schl\u00fcsselwort lambda eingeleitet innerhalb von anderen Funktionsaufrufen k\u00f6nnen anonyme Funktionen als Parameter eingetragen werden lambda Annotationen sind Anmerkungen, die bei einer Funktion angegeben werden k\u00f6nnen __annotations__ Rekursion ist eine Programmiertechnik, indem eine Funktion sich selbst ein oder mehrmals in ihrem Funktionsk\u00f6rper (body) aufruft","title":"Funktionen"},{"location":"python/functions/functions/#funktionen","text":"Funktionen k\u00f6nnen selber aus mehreren Bestandteilen bestehen: - Variablen - Datenstrukturen - If-Else-Struktur - Schleifenstrukturen - Eingaben - Dateiverarbeitung - Funktionen","title":"Funktionen"},{"location":"python/functions/functions/#parameter-reihenfolge","text":"Positionsparameter n-Parameter(Tupel) Schl\u00fcsselwertparameter n-Parameter(Dictionary)","title":"Parameter Reihenfolge"},{"location":"python/functions/functions/#parameterdefinitionen","text":"","title":"Parameterdefinitionen"},{"location":"python/functions/functions/#positionsparameter","text":"Die Parameter bei den Funktionen in der bisherigen Notation sind sog. Positionsparameter Die \u00dcbertragung von Argumenten in der Funktionsschnittstelle ist durch die Positionsparameter in einer definierten Reihenfolge Beispiel: math.pow(x, y) x ist der erste Positionsparameter (Basis der Potenz) y ist der zweite Positionsparameter (Exponent der Potenz) Bei eigenen Funktionen sind die Parameter ohne weitere Angaben Positionsparameter Positionsparameter sind obligatorisch f\u00fcr den Funktionsaufruf","title":"Positionsparameter"},{"location":"python/functions/functions/#optionale-parameter","text":"Optionale Parameter werden in der Funktionsdefinition als Parameter definiert, die optional sind Bei dem Funktionsaufruf m\u00fcssen sie nicht (!) mit angegeben werden Sie werden mit 0 oder mit \u201c\u201c oder mit None als Platzhalter angegeben Beispiel: def funktion(x, y=0, z=None)","title":"optionale Parameter"},{"location":"python/functions/functions/#schlusselwertparameter","text":"Schl\u00fcsselwertparameter treten bei dem Funktionsaufruf auf Bei dem Funktionsaufruf werden die Parameternamen der Funktion explizit aufgerufen Die Reihenfolge der Schl\u00fcsselwertparameter untereinander ist hierbei irrelevant Beispiel: ergebnis = funktion(x=1,y=2)","title":"Schl\u00fcsselwertparameter"},{"location":"python/functions/functions/#beliebige-parameteranzahl-tupel","text":"In Python ist es m\u00f6glich eine beliebige Parameteranzahl zu programmieren Die Datenstruktur in der beliebigen Parameteranzahl \u00fcber * gespeichert wird ist das Tupel Diese Parameteranzahl kann 0 bis n betragen Beispiel: def funktion(*parameter)","title":"beliebige Parameteranzahl (Tupel)"},{"location":"python/functions/functions/#beliebige-parameteranzahl-dictionary","text":"Die Datenstruktur in der beliebigen Parameteranzahl \u00fcber ** gespeichert wird ist das Dictionary Diese Parameteranzahl kann 0 bis n betragen Beispiel: funktion(**parameter)","title":"beliebige Parameteranzahl (Dictionary)"},{"location":"python/functions/functions/#reine-schlusselwertparameter","text":"Die sog. reinen Schl\u00fcsselwertparameter treten in Kombination mit dem Parametertyp der beliebig viele Werte in einem Tupel speichert Jeder Parameter, der nach diesem Parametertyp gespeichert wird ist ein sog. Schl\u00fcsselwertparameter Beispiel: def funktion(*a, rein_schl1, rein_schl2) Bei dem Funktionsaufruf m\u00fcssen sie wie normale Schl\u00fcsselwertargumente aufgerufen werden Beispiel funktion(2, 3, 4, rein_schl1 = 10, rein_schl2 = 6)","title":"reine Schl\u00fcsselwertparameter"},{"location":"python/functions/functions/#namensraume","text":"Es gibt - globale Variablen/ Funktionen und - lokale Variablen/ Funktionen Die Namen der Variablen k\u00f6nnen identisch sein, da sie verschiedenen Namensr\u00e4umen zugeordnet sind","title":"Namensr\u00e4ume"},{"location":"python/functions/functions/#lokale-referenz","text":"sobald eine Funktion und ihre lokale Variable die globalen Variable \u00fcberschreiben will, entsteht dadurch eine sog. Lokale Referenz Diese lokale Referenz kann die globale Variable nicht \u00fcberschreiben global generiert einen Schreibzugriff auf eine globale Variable s nonlocal kann auf lokale Variablen eines h\u00f6heren Geltungsbereich zugreifen","title":"Lokale Referenz"},{"location":"python/functions/functions/#anonyme-funktion","text":"besitzen keinen Funktionsnamen werden durch das Schl\u00fcsselwort lambda eingeleitet innerhalb von anderen Funktionsaufrufen k\u00f6nnen anonyme Funktionen als Parameter eingetragen werden lambda","title":"Anonyme Funktion"},{"location":"python/functions/functions/#annotationen","text":"sind Anmerkungen, die bei einer Funktion angegeben werden k\u00f6nnen __annotations__","title":"Annotationen"},{"location":"python/functions/functions/#rekursion","text":"ist eine Programmiertechnik, indem eine Funktion sich selbst ein oder mehrmals in ihrem Funktionsk\u00f6rper (body) aufruft","title":"Rekursion"},{"location":"python/functions/functions_begriffe/","text":"Begriffe Funktionen Funktionen Begriff Beschreibung Beispiel Funktionsdefinition definiert Funktion und ihre Bestandteile Funktionsaufruf function(x,y) ruft Funktion mit den jeweiligen Argumenten auf Funktionsname benennt Funktion Funktionsobjekt ein Konstrukt, mit dem ein Objekt aufgerufen werden kann eine Referenzvariable die die Funktion \u00fcbernommen hat Funktionsschnittstelle Gesamtheit aller Funktionsparameter Funktionsk\u00f6rper beinhaltet die Operationen der Funktion R\u00fcckgabewert Funktionen geben einen Wert zur\u00fcck. Bei keiner weiteren Definition ist dies None Parameter Parameter Positionsparameter math.pow(x,y) \u00fcbertr\u00e4gt Argumente in einer definierten Reihenfolge sind obligatorisch f\u00fcr Funktionsaufruf Funktionsparameter Platzhalter f\u00fcr die Argumente in der Funktionsschnittstelle Argumente Werte von au\u00dferhalb der Funktion, die \u00fcber die Funktionsschnittstelle und die Funktionsparameter \u00fcbergeben werden optionale Parameter def function(x, y=0, z=None) m\u00fcssen beim Funktionsaufruf nicht angegeben werden werden mit 0 / \"\" / None als Platzhalter angegeben Schl\u00fcsselwert parameter function(x=1, y=2) beim Funktionsaufruf werden die Parameternamen der Funktion explizit aufgerufen Reihenfolge ist hierbei irrelevant beliebige Paramete- anzahl (Tupel) function(*parameter) * speichert beliebige Parameteranzahl in einem Tupel","title":"Begriffe"},{"location":"python/functions/functions_begriffe/#begriffe","text":"","title":"Begriffe"},{"location":"python/libraries/l_math/","text":"Math Konstanten - math.e eulersche Zahl - math.pi pi - math.inf unendlich - math.nan \"Not a Number\" Funktionen - math.ceil(x) rundet auf n\u00e4chsth\u00f6here Ganzzahl auf - math.floor(x) rundet auf n\u00e4chstniedrigere Ganzzahl ab - math.factorial(x) berechnet Fakult\u00e4t einer Zahl x Thema Funktion Code Beschreibung Konstanten e math.e Eulersche Zahl pi math.pi Kreiszahl pi inf math.inf unendliche Zahl NaN math.nan Not a Number zahlentheoretische Funktionen ceil math.ceil(x) rundet auf die n\u00e4chsth\u00f6here Ganzzahl auf floor math.floor(x) rundet auf die n\u00e4chstkleinere Ganzzahl ab factorial math.factorial(x) berechnet die Fakult\u00e4t der Zahl x fsum math.fsum(x[]) berechnet die Summe der Datenstruktur x (pr\u00e4ziser als sum()) fmod math.fmod(x,y) berechnet Modulo f\u00fcr float-Zahlen gcd math.gcd(x) gibt den gr\u00f6\u00dften gemeinsamen Teiler zur\u00fcck trunc math.trunc(x) gibt den Vorkommaanteil als ganze Zahl zur\u00fcck Exponential- und Logaritmusfunktionen exp math.exp(x) berechnet x als Exponenten zur Konstanten e log math.log(x,basis) berechnet Logarithmus von x zu basis pow math.pow(x,y) berechnet die Potenz x^y sqrt math.sqrt(x) berechnet die Quadratwurzel von x Trigonometrische und hyperbolische Funktionen sin math.sin(x) berechnet Sinus von x cos math.cos(x) berechnet Cosinus von x tan math.tan(x) berechnet Tangens von x Winkelumrechnung degrees math.degrees(x) konvertiert den Winkel x von Radient zu Gradzahl radians math.radians(x) konvertiert den Winkel x von Gradzahl zu Radient","title":"Math"},{"location":"python/libraries/l_math/#math","text":"Konstanten - math.e eulersche Zahl - math.pi pi - math.inf unendlich - math.nan \"Not a Number\" Funktionen - math.ceil(x) rundet auf n\u00e4chsth\u00f6here Ganzzahl auf - math.floor(x) rundet auf n\u00e4chstniedrigere Ganzzahl ab - math.factorial(x) berechnet Fakult\u00e4t einer Zahl x Thema Funktion Code Beschreibung Konstanten e math.e Eulersche Zahl pi math.pi Kreiszahl pi inf math.inf unendliche Zahl NaN math.nan Not a Number zahlentheoretische Funktionen ceil math.ceil(x) rundet auf die n\u00e4chsth\u00f6here Ganzzahl auf floor math.floor(x) rundet auf die n\u00e4chstkleinere Ganzzahl ab factorial math.factorial(x) berechnet die Fakult\u00e4t der Zahl x fsum math.fsum(x[]) berechnet die Summe der Datenstruktur x (pr\u00e4ziser als sum()) fmod math.fmod(x,y) berechnet Modulo f\u00fcr float-Zahlen gcd math.gcd(x) gibt den gr\u00f6\u00dften gemeinsamen Teiler zur\u00fcck trunc math.trunc(x) gibt den Vorkommaanteil als ganze Zahl zur\u00fcck Exponential- und Logaritmusfunktionen exp math.exp(x) berechnet x als Exponenten zur Konstanten e log math.log(x,basis) berechnet Logarithmus von x zu basis pow math.pow(x,y) berechnet die Potenz x^y sqrt math.sqrt(x) berechnet die Quadratwurzel von x Trigonometrische und hyperbolische Funktionen sin math.sin(x) berechnet Sinus von x cos math.cos(x) berechnet Cosinus von x tan math.tan(x) berechnet Tangens von x Winkelumrechnung degrees math.degrees(x) konvertiert den Winkel x von Radient zu Gradzahl radians math.radians(x) konvertiert den Winkel x von Gradzahl zu Radient","title":"Math"},{"location":"python/libraries/l_random/","text":"Bibliotheken Einbinden von Bibliotheken \u00fcber import und dem Namen der Bibliothek Random - Pseudozufallsgenerator Zufallszahlen generieren seed random.seed() wenn kein Parameter angegeben wird, wird der Generator mit der aktuellen Systemzeit initialisiert erzeugt ein Tupel von Werten Status getstate random.getstate() ben\u00f6tigt keinen Parameter, da der Status abgefragt wird setstate random.setstate() Status der Zufallszahlen wird auf den Ausgangszustand gesetzt ganze Zahlen randint random.randint(startwert, endwert) erzeugt ganze Zahl randrange random.randrange(startwert, endwert, zahlenfolge) Parameter zahlenfolge steht f\u00fcr 2er-Zahlenfolge, 3-Zahlenfolge etc Flie\u00dfkommazahl random random.random() erzeugt Flie\u00dfkommazahl uniform random.uniform(startwert, endwert) erzeugt Flie\u00dfkommazahl zwischen den Werten zufallsgesteuerte Operationen choice random.choice(struktur) w\u00e4hlt aus Datenstrukturen (Liste, Tupel, Sequenz) zuf\u00e4llig einen Wert darf nicht leer sein sample random.sample(struktur, anzahl) w\u00e4hlt aus den Datenstrukturen zuf\u00e4llig die Anzahl von Werten Werte werden in einer Liste gespeichert shuffle random.shuffle(struktur) ergibt zuf\u00e4llig angeordnete Werte der Struktur \u00e4nderungen sind permanent systemgesteuerter Zufall SystemRandom random.SystemRandom() besitzt nicht alle Funktionen von random","title":"L random"},{"location":"python/libraries/l_random/#bibliotheken","text":"Einbinden von Bibliotheken \u00fcber import und dem Namen der Bibliothek","title":"Bibliotheken"},{"location":"python/libraries/l_random/#random-pseudozufallsgenerator","text":"Zufallszahlen generieren seed random.seed() wenn kein Parameter angegeben wird, wird der Generator mit der aktuellen Systemzeit initialisiert erzeugt ein Tupel von Werten Status getstate random.getstate() ben\u00f6tigt keinen Parameter, da der Status abgefragt wird setstate random.setstate() Status der Zufallszahlen wird auf den Ausgangszustand gesetzt ganze Zahlen randint random.randint(startwert, endwert) erzeugt ganze Zahl randrange random.randrange(startwert, endwert, zahlenfolge) Parameter zahlenfolge steht f\u00fcr 2er-Zahlenfolge, 3-Zahlenfolge etc Flie\u00dfkommazahl random random.random() erzeugt Flie\u00dfkommazahl uniform random.uniform(startwert, endwert) erzeugt Flie\u00dfkommazahl zwischen den Werten zufallsgesteuerte Operationen choice random.choice(struktur) w\u00e4hlt aus Datenstrukturen (Liste, Tupel, Sequenz) zuf\u00e4llig einen Wert darf nicht leer sein sample random.sample(struktur, anzahl) w\u00e4hlt aus den Datenstrukturen zuf\u00e4llig die Anzahl von Werten Werte werden in einer Liste gespeichert shuffle random.shuffle(struktur) ergibt zuf\u00e4llig angeordnete Werte der Struktur \u00e4nderungen sind permanent systemgesteuerter Zufall SystemRandom random.SystemRandom() besitzt nicht alle Funktionen von random","title":"Random - Pseudozufallsgenerator"},{"location":"python/libraries/l_tkinter/","text":"Tkinter Notwendige Bibliotheken: Tkinter allgemein from tkinter import * Tkinter messagebox from tkinter import messagebox as mb Hintergrundfarben from turtle import bgcolor Farben import colorama Basics root-element initialisieren root = None Frame erstellen root = Tk() Framesize angeben root.geometry(\"700x700\") Frametitle eingeben root.title(\"McMcT-Men\u00fc\") Buttons Button design frame = Frame(root) button = Button(frame, text = \"Button1\", command = set, fg = \"red\", bd = 2, bg = \"light blue\", relief = \"groove\") Button padding button.pack(pady = 5, padx = 5) Endlos-Schleife root.mainloop() Parameter master = parent window options activebackground Background color when the button is under the cursor. bd Borderwidth in pixels bg normal background command function oder method to be called when the button is clicked font text font heigth height of the button in text lines (for textual buttons) oder pixel (for images) width width of the button image image instead of text justify LEFT, CENTER or RIGHT padx padding left and right pady padding above and below relief SUNKEN, RAISED, GROOVE or RIDGE state DISABLED, ACTIVE, NORMAL wraplength the text lines will be wrapped to fit within this length Methods flash() Causes the button to flash several times between active and normal colors. Leaves the button in the state it was in originally. invoke() Calls the button's callback, and returns what that function returns.","title":"Tkinter"},{"location":"python/libraries/l_tkinter/#tkinter","text":"","title":"Tkinter"},{"location":"python/libraries/l_tkinter/#notwendige-bibliotheken","text":"Tkinter allgemein from tkinter import * Tkinter messagebox from tkinter import messagebox as mb Hintergrundfarben from turtle import bgcolor Farben import colorama","title":"Notwendige Bibliotheken:"},{"location":"python/libraries/l_tkinter/#basics","text":"root-element initialisieren root = None Frame erstellen root = Tk() Framesize angeben root.geometry(\"700x700\") Frametitle eingeben root.title(\"McMcT-Men\u00fc\")","title":"Basics"},{"location":"python/libraries/l_tkinter/#buttons","text":"Button design frame = Frame(root) button = Button(frame, text = \"Button1\", command = set, fg = \"red\", bd = 2, bg = \"light blue\", relief = \"groove\") Button padding button.pack(pady = 5, padx = 5) Endlos-Schleife root.mainloop()","title":"Buttons"},{"location":"python/libraries/l_tkinter/#parameter","text":"master = parent window options activebackground Background color when the button is under the cursor. bd Borderwidth in pixels bg normal background command function oder method to be called when the button is clicked font text font heigth height of the button in text lines (for textual buttons) oder pixel (for images) width width of the button image image instead of text justify LEFT, CENTER or RIGHT padx padding left and right pady padding above and below relief SUNKEN, RAISED, GROOVE or RIDGE state DISABLED, ACTIVE, NORMAL wraplength the text lines will be wrapped to fit within this length","title":"Parameter"},{"location":"python/libraries/l_tkinter/#methods","text":"flash() Causes the button to flash several times between active and normal colors. Leaves the button in the state it was in originally. invoke() Calls the button's callback, and returns what that function returns.","title":"Methods"},{"location":"react/jsx/","text":"JSX Javascript-Ausdr\u00fccke m\u00fcssen in {} gesetzt werden <div id=\"app\"> <p>Ein Paragraph in JSX</p> <p>Ein weiterer Paragraph</p> </div> wird durch Babel zu React.createElement( 'div', { id: 'app' }, React.createElement('p', null, 'Ein Paragraph in JSX'), React.createElement('p', null, 'Ein weiterer Paragraph') ); createElement([Tag-Name eines DOM-Elements], [Props eines Elements], [Kind-Elemente]) Ausdr\u00fccke werden in {} geschrieben Klammern JSX muss in Klammern geschrieben werden, wenn es mehr als eine Zeile umfasst Bei Objekten als Wert m\u00fcssen jeweils zwei \u00f6ffnende und schlie\u00dfende Klammern geschrieben werden. Die \u00e4u\u00dferen Klammern leiten den Ausdruck ein (bzw. beenden diesen) und die inneren sind die, des eigentlichen Objekts: <User data={{ name: 'Manuel', location: 'Berlin' }} /> Das gilt in \u00e4hnlicher Form auch f\u00fcr Array-Literals, nat\u00fcrlich mit dem Unterschied, dass die inneren Klammern die eckigen sind, die das Array-Literal kennzeichnen: <List items={[1, 2, 3, 4, 5]} /> Schreibweise DOM Element Interface class (Klasse) ==> className for (Einleitung von Schleifen) ==> htmlFor Unterst\u00fctzte HTML -Attribute: accept acceptCharset accessKey action allowFullScreen alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked cite classID className colSpan cols content contentEditable contextMenu controls controlsList coords crossOrigin data dateTime default defer dir disabled download draggable encType form formAction formEncType formMethod formNoValidate formTarget frameBorder headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media mediaGroup method min minLength multiple muted name noValidate nonce open optimum pattern placeholder poster preload profile radioGroup readOnly rel required reversed role rowSpan rows sandbox scope scoped scrolling seamless selected shape size sizes span spellCheck src srcDoc srcLang srcSet start step style summary tabIndex target title type useMap value width wmode wrap Inline-Styles HTML <div style=\"margin-left: 12px; border-color: red; padding: 8px\"></div> JSX <div style={{ marginLeft: '12px', borderColor: 'red', padding: '8px' }} /> Kommentare { / Kommentare werden so geschrieben / } Code-Beispiele JS: React.createElement('div', {id: 'hello-world'}, 'Hello World'); JSX: <div id=\"hello-world\">Hello World</div> JS: class ShoppingList extends React.Component { render() { return ( <div className=\"shopping-list\"> <h1>Shopping List for {this.props.name}</h1> <ul> <li>Instagram</li> <li>WhatsApp</li> <li>Oculus</li> </ul> </div> ); } } JSX: return React.createElement('div', {className: 'shopping-list'}, React.createElement('h1', /* ... h1 children ... */), React.createElement('ul', /* ... ul children ... */) );","title":"JSX"},{"location":"react/jsx/#jsx","text":"Javascript-Ausdr\u00fccke m\u00fcssen in {} gesetzt werden <div id=\"app\"> <p>Ein Paragraph in JSX</p> <p>Ein weiterer Paragraph</p> </div> wird durch Babel zu React.createElement( 'div', { id: 'app' }, React.createElement('p', null, 'Ein Paragraph in JSX'), React.createElement('p', null, 'Ein weiterer Paragraph') ); createElement([Tag-Name eines DOM-Elements], [Props eines Elements], [Kind-Elemente]) Ausdr\u00fccke werden in {} geschrieben","title":"JSX"},{"location":"react/jsx/#klammern","text":"JSX muss in Klammern geschrieben werden, wenn es mehr als eine Zeile umfasst Bei Objekten als Wert m\u00fcssen jeweils zwei \u00f6ffnende und schlie\u00dfende Klammern geschrieben werden. Die \u00e4u\u00dferen Klammern leiten den Ausdruck ein (bzw. beenden diesen) und die inneren sind die, des eigentlichen Objekts: <User data={{ name: 'Manuel', location: 'Berlin' }} /> Das gilt in \u00e4hnlicher Form auch f\u00fcr Array-Literals, nat\u00fcrlich mit dem Unterschied, dass die inneren Klammern die eckigen sind, die das Array-Literal kennzeichnen: <List items={[1, 2, 3, 4, 5]} />","title":"Klammern"},{"location":"react/jsx/#schreibweise-dom-element-interface","text":"class (Klasse) ==> className for (Einleitung von Schleifen) ==> htmlFor Unterst\u00fctzte HTML -Attribute: accept acceptCharset accessKey action allowFullScreen alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked cite classID className colSpan cols content contentEditable contextMenu controls controlsList coords crossOrigin data dateTime default defer dir disabled download draggable encType form formAction formEncType formMethod formNoValidate formTarget frameBorder headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media mediaGroup method min minLength multiple muted name noValidate nonce open optimum pattern placeholder poster preload profile radioGroup readOnly rel required reversed role rowSpan rows sandbox scope scoped scrolling seamless selected shape size sizes span spellCheck src srcDoc srcLang srcSet start step style summary tabIndex target title type useMap value width wmode wrap","title":"Schreibweise DOM Element Interface"},{"location":"react/jsx/#inline-styles","text":"HTML <div style=\"margin-left: 12px; border-color: red; padding: 8px\"></div> JSX <div style={{ marginLeft: '12px', borderColor: 'red', padding: '8px' }} />","title":"Inline-Styles"},{"location":"react/jsx/#kommentare","text":"{ / Kommentare werden so geschrieben / }","title":"Kommentare"},{"location":"react/jsx/#code-beispiele","text":"JS: React.createElement('div', {id: 'hello-world'}, 'Hello World'); JSX: <div id=\"hello-world\">Hello World</div> JS: class ShoppingList extends React.Component { render() { return ( <div className=\"shopping-list\"> <h1>Shopping List for {this.props.name}</h1> <ul> <li>Instagram</li> <li>WhatsApp</li> <li>Oculus</li> </ul> </div> ); } } JSX: return React.createElement('div', {className: 'shopping-list'}, React.createElement('h1', /* ... h1 children ... */), React.createElement('ul', /* ... ul children ... */) );","title":"Code-Beispiele"},{"location":"react/react/","text":"React Allgemein Begriffe props = Eigenschaften render = Anzeigen von etwas immutable = unver\u00e4nderlich Reconciliation = Abgleich transpiling = Prozess, bei dem der Sourcecode von einer Sprache in ein entsprechendes funktional identisches Gegenst\u00fcck einer anderen Sprache umgewandelt wird. Komponenten Komponenten unterteilt den Code in einzelne St\u00fccke eine Komponente hat zwingend einen return-Wert dieser kann entweder ein null sein, ein React-Element oder ein String/ Array Komponenten m\u00fcssen mit einem Gro\u00dfbuchstaben anfangen BestPractice: UpperCamelCase-Form Function Components ist eine gew\u00f6hnliche JavaScript-Funktion, z.B.: function Hello(props) { return <div>Hello {props.name}</div>; } Class Components bekommt keine Argumente \u00fcbergeben kann einzig \u00fcber die Instanz-Eigenschaft this.props auf die Props zugreifen class Hello extends React.Component { render() { return <div>Hello {this.props.name}</div>; } } Ein Kriterium, das beide Arten von Komponenten gemeinsam haben, ist, dass der displayName, also der Name einer g\u00fcltigen Komponente, stets mit einem Gro\u00dfbuchstaben anf\u00e4ngt. Der Rest des Namens kann aus Gro\u00dfbuchstaben oder Kleinbuchstaben bestehen, wichtig ist lediglich, dass der erste Buchstabe stets ein Gro\u00dfbuchstabe ist! PureComponent Code-Bestandteile extends React.Component : erweitert die react-interne Klasse, wodurch unsere Klasse zu einer Komponente wird, die wir in React nutzen k\u00f6nnen. render : zwingender Bestandteil einer Komponente dadurch wird React mitgeteilt, wie die Komponente dargestellt (gerendert) werden soll dient dazu, deklarativ den Zustand unseres UI zu beschreiben 'render'-Methode sollte als BestPractice als letzte Methode einer Komponente definiert werden React.createElement() : eine von 3 Top-Level API-Methoden erwartet 1-n Parameter: - Typ : bspw. 'div', 'span', 'p' - Props : schreibgesch\u00fctzte \"Eigenschafts-Objekte\" einer Komponente - beliebig viele Kind-Elemente : bspw. React-Elemente, Arrays, Funktionen, einfacher Text ReactDOM.render(Element, Container) : zweite Library ist zust\u00e4ndig f\u00fcr das Zusammenspiel von React mit dem DOM besitzt nur sehr wenige Top-Level-API-Methoden ReactDOM sorgt daf\u00fcr, dass wir die angegebene Komponente im Browser sehen k\u00f6nnen Syntax: ReactDOM.render([Element],[Container]) Tools Node.js npm yarn babel presets: @babel/preset-env @babel/preset-react @babel/plugin-proposal-object-rest-spread @babel/plugin-proposal-class-properties @babel/plugin-syntax-dynamic-import webpack esLint prettier zero config setup Rendering Im HTML -Code muss ein Element mit einer eindeutigen ID (in diesem Fall 'root') gekennzeichnet werden. Anschlie\u00dfend kann man \u00fcber folgenden Aufruf den Code rendern. const [name] = <div>[Text]</div>; ReactDOM.render([name], document.getElementById('root')); document.getElementByID findet das entsprechende Element und \u00fcbergibt den Code. React-Elemente sind immutable = unver\u00e4nderlich diverses state verwenden damit der Click gespeichert wird In JavaScript classes, you need to always call ```super``` when defining the constructor of a subclass. All React component classes that have a constructor should start with a super(props) call. Beispiel Html-Datei: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\" /> <title>Hallo React!</title> </head> <body> <div id=\"root\"></div> <script crossorigin src=\"https://unpkg.com/react@16.8.4/umd/react.development.js\"></script> <script crossorigin src=\"https://unpkg.com/react-dom@16.8.4/umd/react-dom.development.js\"></script> <script> // Platzhalter f\u00fcr unsere erste Komponente </script> </body> </html> JS-Datei: class HelloWorld extends React.Component { render() { return React.createElement( 'div', { id: 'hello-world' }, 'Hello World' ); } } ReactDOM.render( React.createElement(HelloWorld), document.getElementById('root') );","title":"React"},{"location":"react/react/#react","text":"","title":"React"},{"location":"react/react/#allgemein","text":"","title":"Allgemein"},{"location":"react/react/#begriffe","text":"props = Eigenschaften render = Anzeigen von etwas immutable = unver\u00e4nderlich Reconciliation = Abgleich transpiling = Prozess, bei dem der Sourcecode von einer Sprache in ein entsprechendes funktional identisches Gegenst\u00fcck einer anderen Sprache umgewandelt wird.","title":"Begriffe"},{"location":"react/react/#komponenten","text":"Komponenten unterteilt den Code in einzelne St\u00fccke eine Komponente hat zwingend einen return-Wert dieser kann entweder ein null sein, ein React-Element oder ein String/ Array Komponenten m\u00fcssen mit einem Gro\u00dfbuchstaben anfangen BestPractice: UpperCamelCase-Form","title":"Komponenten"},{"location":"react/react/#function-components","text":"ist eine gew\u00f6hnliche JavaScript-Funktion, z.B.: function Hello(props) { return <div>Hello {props.name}</div>; }","title":"Function Components"},{"location":"react/react/#class-components","text":"bekommt keine Argumente \u00fcbergeben kann einzig \u00fcber die Instanz-Eigenschaft this.props auf die Props zugreifen class Hello extends React.Component { render() { return <div>Hello {this.props.name}</div>; } } Ein Kriterium, das beide Arten von Komponenten gemeinsam haben, ist, dass der displayName, also der Name einer g\u00fcltigen Komponente, stets mit einem Gro\u00dfbuchstaben anf\u00e4ngt. Der Rest des Namens kann aus Gro\u00dfbuchstaben oder Kleinbuchstaben bestehen, wichtig ist lediglich, dass der erste Buchstabe stets ein Gro\u00dfbuchstabe ist!","title":"Class Components"},{"location":"react/react/#purecomponent","text":"","title":"PureComponent"},{"location":"react/react/#code-bestandteile","text":"extends React.Component : erweitert die react-interne Klasse, wodurch unsere Klasse zu einer Komponente wird, die wir in React nutzen k\u00f6nnen. render : zwingender Bestandteil einer Komponente dadurch wird React mitgeteilt, wie die Komponente dargestellt (gerendert) werden soll dient dazu, deklarativ den Zustand unseres UI zu beschreiben 'render'-Methode sollte als BestPractice als letzte Methode einer Komponente definiert werden React.createElement() : eine von 3 Top-Level API-Methoden erwartet 1-n Parameter: - Typ : bspw. 'div', 'span', 'p' - Props : schreibgesch\u00fctzte \"Eigenschafts-Objekte\" einer Komponente - beliebig viele Kind-Elemente : bspw. React-Elemente, Arrays, Funktionen, einfacher Text ReactDOM.render(Element, Container) : zweite Library ist zust\u00e4ndig f\u00fcr das Zusammenspiel von React mit dem DOM besitzt nur sehr wenige Top-Level-API-Methoden ReactDOM sorgt daf\u00fcr, dass wir die angegebene Komponente im Browser sehen k\u00f6nnen Syntax: ReactDOM.render([Element],[Container])","title":"Code-Bestandteile"},{"location":"react/react/#tools","text":"Node.js npm yarn babel presets: @babel/preset-env @babel/preset-react @babel/plugin-proposal-object-rest-spread @babel/plugin-proposal-class-properties @babel/plugin-syntax-dynamic-import webpack esLint prettier zero config setup","title":"Tools"},{"location":"react/react/#rendering","text":"Im HTML -Code muss ein Element mit einer eindeutigen ID (in diesem Fall 'root') gekennzeichnet werden. Anschlie\u00dfend kann man \u00fcber folgenden Aufruf den Code rendern. const [name] = <div>[Text]</div>; ReactDOM.render([name], document.getElementById('root')); document.getElementByID findet das entsprechende Element und \u00fcbergibt den Code. React-Elemente sind immutable = unver\u00e4nderlich","title":"Rendering"},{"location":"react/react/#diverses","text":"state verwenden damit der Click gespeichert wird In JavaScript classes, you need to always call ```super``` when defining the constructor of a subclass. All React component classes that have a constructor should start with a super(props) call.","title":"diverses"},{"location":"react/react/#beispiel","text":"Html-Datei: <!DOCTYPE html> <html> <head> <meta charset=\"UTF-8\" /> <title>Hallo React!</title> </head> <body> <div id=\"root\"></div> <script crossorigin src=\"https://unpkg.com/react@16.8.4/umd/react.development.js\"></script> <script crossorigin src=\"https://unpkg.com/react-dom@16.8.4/umd/react-dom.development.js\"></script> <script> // Platzhalter f\u00fcr unsere erste Komponente </script> </body> </html> JS-Datei: class HelloWorld extends React.Component { render() { return React.createElement( 'div', { id: 'hello-world' }, 'Hello World' ); } } ReactDOM.render( React.createElement(HelloWorld), document.getElementById('root') );","title":"Beispiel"}]}